defpackage events :
    import core
    import collections
    import labyrinth
    import cards
    import communicator

val CGREEN = "[32m"
val CEND = "[0m"

var term : True|False  = true
var globalVerbose = 1


defn evprint<?T> ( msg : ?T ) :
    if not term:
        print("<span style='color:green'>")
        print(msg)
        print("</span>")
        ;todo
        ;mprint(newargs)
    else:
        print(to-string(to-char(27)))
        print(CGREEN)
        print(msg)
        print(to-string(to-char(27)))
        print(CEND)

defn evprintln<?T> (msg : ?T) :
    evprint(msg)
    evprint("\n")

defn getDisplays (game : Labyrinth validAnswers : Seqable<Int>&Lengthable) -> Tuple<String> :
    val displays = Vector<String>()
    do( {
        val [ops assoc title] = getCardInfo(_)
        add(displays string-join([to-string(ops) "(" assoc ")" title] " "))
        }
        validAnswers
    )
    to-tuple(displays)


defn declareCaliphate (game : Labyrinth name : String original_cell : Int) -> False :
    label<False> return :
        if not awakening(game) and not foreverwar(game) :
            return(false)
        if scenario(game) == "Surge":
            evprintln("No Caliphate in %_ in %_" % [name scenario(game)])
            return(false)
        if getCell(game name) - original_cell < 3:
            return(false)
        val v = extract(game isCaliphateCapital{game _} false)
        if length(v) > 0:
            return(false)
        if not isCivilWar(game name) and not isRegimeChange(game name) and getGovern(game name) != "islamrule" :
            return(false)
        val ans = queryDeclareCaliphate(
                comm(game) as Communicator
                "jihadist" 
                append-all(["Declare Caliphate Capital in " name "?"]) 
                ["y", "n"]
                append-all(["caliphatecapital=" name])
                [ append-all(["Yes, declare Caliphate in " name]) "No"] )
        if ans == "y" :
            setCaliphateCapital(game name)
            spreadCaliphate(game)

defn backlash (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    val validCountries = extract(game fn (x) : (isMuslim(game x) and not isCaliphate(game x)))
    val plottedCountries = Vector<String>()
    do( fn (name) : do(
            { add(plottedCountries name) when name == _[0] }
            plots(game)
        )
        validCountries
    )
    label<True|False> return :
        if length(plottedCountries) == 0 :
            evprint("No plot in Muslim country")
            return(false)
        if isFulfill or isPlayable:
            return(true)
        val name = queryCountry-noNull(comm(game) as Communicator player
                    "Change Plot to subtract Funding" to-tuple(plottedCountries) append-all(["event=" to-string(card-id)]) )
        val validPlots = Vector<Int>()
        do( fn (i) : (add(validPlots i) when (plots(game))[i][0] == name)
            0 to length(plots(game))
        )
        val validPlots-display = map({to-string(_)} to-tuple(validPlots))
        val ans = queryNumber(comm(game) as Communicator player "Which Plot Index?" 
                validPlots append-all(["event=" to-string(card-id)]) validPlots-display false)
                when length(validPlots) > 1 else 
                validPlots[0] when length(validPlots) == 1 else
                (evprintln("No Plot") return(false))
        match(ans) :
            (ans : Int) :
                val [ans-name ans-power] = (plots(game))[ans]
                match(ans-power) :
                    (power : Int) : (plots(game))[ans] = [ans-name (- power)]
                    (power : String) : (plots(game))[ans] = [ans-name append-all(["-" power])]
                    (f) : false
                evprintln("Plots=%_" % [plots(game)])
            (f) : false
        false

defn specialForces (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        val troopCountries = 
            extract(game {getTroopStrength(game _) > 0}) when card-id == 10 else
            extract(game fn (x) : (getTroopStrength(game x) > 0 or isAdvisors(game x)))
        if length(troopCountries) == 0:
            evprintln("No Troops or Advisors")
            return(false)
        val troopCountries2 =
            adjacentRegion(game troopCountries) when card-id == 10 else
            adjacentRegion(game adjacentRegion(game troopCountries)) when (card-id == 129 or card-id == 130) else
            troopCountries
        val validCountries = extract(game {getCell(game _) > 0} troopCountries)
        if length(validCountries) == 0:
            evprintln("No Cell within the region")
            return(false)
        if isPlayable:
            return(true)
        val name = queryCountry-noNull(comm(game) as Communicator "us" "Where to Remove cell?" validCountries, "eventdisrupt")
        removeOneCellToTrack(game name true false)
        false

defn alAzhar (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        if not isUntested(game "egypt") and funding(game) == 1 : return(false)
        if isPlayable : return(true)
        testCountry(game "egypt")
        changeFunding(game (- 2)) when length(extract(game {islamrule?(game _)})) > 0 else changeFunding(game (- 4))
        false

defn anbarAwakening (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game {getTroopStrength(game _) > 0} ["iraq" "syria"])
        if length(validCountries) == 0 : return(false)
        if isFulfill or isPlayable : return(true)
        match(queryCountry(comm(game) as Communicator player "Place Aid" validCountries "marker")) :
            (name : String) :
                addOneAid(game name true)
                changePrestige(game 1)
                setAndBlockMarker(game "iraq" "anbarawakening" ["alanbar"])
            (f) : false
        false

defn ethiopiaStrikes (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game {islamrule?(game _)} ["somalia" "sudan"])
        if length(validCountries) == 0 : return(false)
        if isFulfill or isPlayable : return(true)
        match(queryCountry(comm(game) as Communicator player "Set to Poor Neutral" validCountries "align")) :
            (name : String) :
                setGovern(game name "poor")
                setAlign(game name "neutral")
            (f) : false
        true

defn euroIslam (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    true when (isFulfill or isPlayable) else ( 
    setPosture(game "benelux" queryPosture(comm(game) as Communicator player))
    val v = extract(game {islamrule?(game _)})
    if length(v) == 0:
        changeFunding(game (- 1))
    true
    )

defn intelCommunity (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill or isPlayable : return(true)
        if jihadistplayer(game) != "bot" :
            evprintln("Jihadist Hand=" % [jihadisthand(game)])
        if card-id == 138:
            val validCountries = extract(game {isCadre(game _)})
            if length(validCountries) > 0:
            val name = queryCountry-noNull(comm(game) as Communicator "us" "Remove a Cadre" validCountries "eventdisrupt")
                when length(validCountries) > 0 else (evprintln("No Cadre") "")
            removeCadre(game name) when name != ""
        playUSOps(game 1 true)
        val ans = queryGeneric(comm(game) as Communicator "us" "Do you want to play an extra card? (y)es or (n)o" ["y" "n"]
            append-all(["event=" to-string(card-id)]) ["Place Extra Card"  "Don't Play Extra Card"] false false)
        if ans == "y" : playOneCard(game true)
        false

defn kemalistRepublic (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        val name = "turkey"
        if fair?(game name) and ally?(game name) : return(false)
        if isPlayable : return(true)
        setGovern(game name "fair")
        setAlign(game name "ally")
        false

defn kingAbdullah (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        val name = "jordan"
        if fair?(game name) and ally?(game name) and prestige(game) == 12 and funding(game) == 1 : return(false)
        if isPlayable : return(true)
        setGovern(game name "fair")
        setAlign(game name "ally")
        changePrestige(game 1)
        changeFunding(game (- 1))
        true


defn letsRoll (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val selections = Vector<Int>()
        val displays = Vector<String>()
        do({
            val [name plot] = _
            if isMuslim(game name) and ally?(game name) or good?(game name):
                add(selections _)
                add(displays name)
            }
            plots(game)
            0 to false
        )
        if length(selections) == 0 : return(false)
        if isFulfill or isPlayable : return(true)
        val ans = queryNumber(comm(game) as Communicator 
                    player
                    append-all(cons("Which Plot to remove? " to-list(displays))) selections "alert" displays false)
        match(ans) :
            (ans : Int) :
                alert(game ans)
                drawOneCard(game player)
                val validCountries = extract(game fn (x) : (x != "us" and not isMuslim(game x) and x != "iran" and not isPermPosture(game x)))
                match(queryCountry(comm(game) as Communicator player "Select Posture" validCountries, "posture")) :
                    (name : String) : setPosture(game name queryPosture(comm(game) as Communicator player))
                    (f) : false
            (f) : false
        false

defn mossadAndShinBet (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val threeCountries = ["israel" "jordan" "lebanon"]
        val validCountries = extract(game {getCell(game _ true) > 0} threeCountries)
        if length(validCountries) == 0 : return(false)
        if isFulfill or isPlayable : return(true)
        do( fn (name) :
                while getCell(game name true) > 0 :
                    removeOneCellToTrack(game name true false)
            threeCountries
        )
        false

defn predator (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game fn (x) : (getCell(game x) > 0 and isMuslim(game x) and x != "iran"))
        if length(validCountries) == 0 : return(false)
        if isFulfill or isPlayable : return(true)
        match(queryCountry(comm(game) as Communicator player "Remove One Cell" validCountries "eventdisrupt")) :
            (name : String) : removeOneCellToTrack(game name true false)
            (f) : false
        false

defn sharia (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        if card-id == 146 and isPlayable : return(true)
        val validCountries = extract(game {isBesiegedRegime(game _)})
        if card-id == 28 and length(validCountries) == 0 : return(false)
        if card-id == 28 and isPlayable : return(true)
        if length(validCountries) > 0:
            val name = queryCountry-noNull(comm(game) as Communicator "us" "Remove Besieged Regime" validCountries "marker")
            removeMarkers(game name ["besiegedregime"])
            addOneAwaken(game name) when card-id == 146
        else if card-id == 146:
            val validCountries2 = extract(
                game 
                fn (x) :
                    isMuslim(game x) and not isCivilWar(game x) and good?(game x) and islamrule?(game x)
            )
            if length(validCountries) > 0:
                val name = queryCountry-noNull(comm(game) as Communicator "us" "Place Awakening" validCountries "marker")
                addOneAwaken(game name)
        false

defn tonyBlair (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill or isPlayable : return(true)
        val posture = getPosture(game "us")
        setPosture(game "uk" posture)
        val selections = Vector<String>()
        val s = to-vector<String>(schengens)
        label<False> break :
            do({match(queryCountry(comm(game) as Communicator 
                        player 
                        append-all(["War of Ideas " to-string((_ + 1)/3)])
                        to-tuple(s)
                        "woinonmuslim")) :
                    (name : String) : 
                        remove-item(s name)
                        add(selections name)
                    (f) : break(false)
                }
                0 to 3
            )
        do( fn (name) :
                rollPosture(game name)
                changePrestige(game 1) when getPosture(game name) == posture
            selections
        )
        true

defn UNNationBuilding (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isMarker(game "markers" "vieirademelloslain") : return(false)
        val validCountries = extract(game {isRegimeChange(game _)})
        if length(validCountries) == 0 : return(false)
        if isFulfill or isPlayable : return(true)
        val name = queryCountry-noNull(comm(game) as Communicator player "Place One Aid and Roll WOI" validCountries "woimuslim")
        addOneAid(game name true)
        woiMuslim(game name true)
        false

defn backChannel (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if not soft?(game "us") : return(false)
        val validCountries = extract(game fn (x) : adversary?(game x) and not islamrule?(game x))
        if length(validCountries) == 0 : return(false)
        if length(ushand(game)) == 0 : return(false)
        val v = Vector<String>()
        do( fn (name) :
                val res = getResource(game name)
                label<False> break :
                    do( fn (other_card) :
                            val [ops assoc title] = getCardInfo(other_card)
                            if ops == res :
                                add(v name)
                                break(false)
                        ushand(game)
                    )
            validCountries
        )
        if isFulfill or isPlayable : return(true)
        val name = queryCountry-noNull(comm(game) as Communicator player "Choose country to Shift" to-tuple(v) "assert")
        val new-resource = getResource(game name)
        val selections = Vector<Int>()
        do( fn (other_card) :
                val [ops assoc title] = getCardInfo(other_card)
                if ops == new-resource :
                    add(selections other_card)
            ushand(game)
        )
        val ans = queryNumber(comm(game) as Communicator player "Which card to discard?" selections "assert" getDisplays(game selections) false)
        discardOneCard(game player index-when!({ans == _} ushand(game)))
        shiftAlign(game name "ally")
        addOneAid(game name true)
        false

defn benazirBhutto (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isMarker(game "pakistan" "bhuttoshot" ) : return(false)
        val region = adjacentRegion(game ["pakistan"])
        val validCountries = extract(game {islamrule?(game _)} region)
        if length(validCountries) > 0 : return(false)
        if isFulfill or isPlayable : return(true)
        setMarker(game "pakistan" "benazirbhutto" true)
        if poor?(game "pakistan") :
            setGovern(game "pakistan" "fair")
        true

defn hijab (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val v = extract(game {islamrule?(game _)})
        if length(v) > 0 : return(false)
        if isFulfill or isPlayable : return(true)
        testCountry(game "turkey")
        improveGovern(game "turkey")
        setPosture(game "france" queryPosture(comm(game) as Communicator player))
        changeFunding(game (- 2))
        true

defn indoPakistaniTalks (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val name = "pakistan"
        if not (good?(game name) or fair?(game name)) : return(false)
        if isFulfill or isPlayable : return(true)
        setAlign(game name "ally")
        setPosture(game "india" queryPosture(comm(game) as Communicator player))
        setAndBlockMarker(game "india" "indopakistanitalks" ["kashmir" "lashkaretayyiba"])
        true

defn massTurnout (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game {isRegimeChange(game _)})
        if length(validCountries) == 0 : return(false)
        if isFulfill or isPlayable : return(true)
        match(queryCountry(comm(game) as Communicator player "Improve Governance" validCountries "govern")) :
            (name : String) : improveGovern(game name)
            (f) : false
        false

defn pakistaniOffensive (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val name = "pakistan"
        if not (ally?(game name) and isMarker(game "pakistan" "fata")) : return(false)
        if isFulfill or isPlayable : return(true)
        removeMarker(game name "fata" true)
        false

defn saferNow (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val v = extract(game {islamrule?(game _)})
        if length(v) > 0 : return(false)
        val goodCountries = extract(game {good?(game _)})
        if length(extract(game {getCell(game _) > 0} goodCountries)) > 0 : return(false)
        do(
            {   val [name plot] = _ 
                if contains?(goodCountries name) : return false
            }
            plots(game)
        )
        if isFulfill or isPlayable : return(true)
        rollPosture(game "us")
        changePrestige(game 3)
        val validCountries = extract(game 
            fn (x) : not isMuslim(game x) and x != "us" and x != "iran" and not isPermPosture(game x))
        val name = queryCountry-noNull(comm(game) as Communicator player "Posture" validCountries "posture")
        setPosture(game name queryPosture(comm(game) as Communicator player))
        false

defn sistani (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game fn (x) : isShia(game x) and isRegimeChange(game x) and getCell(game x true) > 0)
        if length(validCountries) == 0 : return(false)
        if isFulfill or isPlayable : return(true)
        match(queryCountry(comm(game) as Communicator player "Improve Governance" validCountries "govern")) :
            (name : String) : improveGovern(game name)
            (f) : false
        false

defn alIttihadAlIslami (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return:
        if isFulfill:
            return(true)
        if cellAvailable(game true) == 0:
            return(false)
        if isPlayable:
            return(true)
        addOneCell(game "somalia" "recruit" true)
        true

defn ansarAlIslam (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isUntested(game "iraq") or getGovern(game "iraq") == "good" :
            return(false)
        if isFulfill :
            return(true)
        if cellAvailable(game true) == 0 :
            return(false)
        if isPlayable:
            return(true)
        val name = queryCountry-noNull(comm(game) as Communicator player "Where to place a cell?" ["iraq" "iran"], "recruit")
        addOneCell(game name "recruit" true)
        true

defn FREs (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if getTroopStrength(game "iraq") == 0 :
            return(false)
        if isFulfill:
            return(true)
        if cellAvailable(game true) == 0:
            return(false)
        if isPlayable:
            return(true)
        val original_cell = getCell(game "iraq")
        val num = 4 when contains?(removed(game) 27) else 2
        do( {addOneCell(game "iraq" "recruit" true)} 0 to num )
        declareCaliphate(game "iraq" original_cell)
        false

defn IEDs (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game fn (x) : isRegimeChange(game x) and getCell(game x) > 0 false)
        when card-id == 52
        else extract(game fn (x) : getCell(game x) > 0 and getTroop(game x) > 0 and isRegimeChange(game x) or isCivilWar(game x) false)
        if length(validCountries) == 0:
            return(false)
        if isFulfill or isPlayable:
            return(true)
        if length(ushand $ game) > 0:
            evprintln("US player discards one card")
            discardOneCard(game "us" -2)
        false

defn madrassas (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if currentphase(game) != 0 or currentplayer(game) != "jihadist":
            return(false)
        if isFulfill :
            return(true)
        if cellAvailable(game true) == 0 or length(jihadisthand(game)) == 0 :
            return(false)
        if isPlayable :
            return(true)
        val validCountries = extract(
            game 
            fn (x) : getGovern(game x) == "poor" or getGovern(game x) == "islamrule" or getCell(game x true) > 0 or isCadre(game x)
        )
        if (length $ jihadisthand $ game) > 0:
            val secondCard = queryCardPlay(comm(game) as Communicator "Choose Second Card" (to-tuple $ jihadisthand $ game))
            remove-item(jihadisthand(game) secondCard)
            val [ops assoc title] = getCardInfo(secondCard)
            val selections = Vector<String>()
            label<False> break : do( 
                {match(queryCountry(comm(game) as Communicator player "Where to recruit?" validCountries "recruit")) :
                    (name : String) : add(selections name)
                    (f) : break(false)}
                0 to (ops + 1)
            )
            do( fn (selection) :
                    val need = getRecruitNum(game selection)
                    evprintln("Recruit in %_. Need <= %_" % [selection need])
                    if need == 6 or rollOnce(game) <= need:
                        addOneCell(game selection "recruit" true)
                selections
            )
            if assoc == "US" :
                if playUSEvent(game secondCard true) :
                    if playUSEvent(game secondCard) :
                        add(removed(game) secondCard)
                    else:
                        doDiscard(game secondCard)
            false

defn uyghurJihad (game : Labyrinth card-id : Int, player : String isPlayable : True|False isFulfill : True|False) -> True|False:
    val name = "china"
    label<True|False> return :
        if isFulfill: return(true)
        if not isUntested(game name) and getCell(game name true) == 0 : return(false)
        if isPlayable : return(true) 
        testCountry(game name)
        if getPosture(game name) == "hard" :
            addOneCell(game "centralasia" "recruit", true)
        else :
            addOneCell(game name "recruit" true)
        true

defn bhuttoShot (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if getCell(game "pakistan") == 0 :
        false
    else if isFulfill or isPlayable:
        true
    else :
        setAndBlockMarker(game "pakistan" "bhuttoshot" ["benazirbhutto"])
        true

defn gazaWar (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if isFulfill :
        true
    else if length(ushand $ game) == 0 and funding(game) == 9 and prestige(game) == 1 :
        false
    else if isPlayable:
        true
    else :
        discardOneCard(game "us" (- 2))
        changeFunding(game 1)
        changePrestige(game (- 1))
        false

defn jemaahIslamiya (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if isFulfill: true
    else if cellAvailable(game true) == 0 : false
    else if isPlayable : true
    else :
        do({addOneCell(game "indonesia" "recruit" true)} 0 to 2)
        false

defn lashkarETayyiba (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if isMarker(game "india" "indopakistanitalks") :
        evprintln("Blocked by Indo-Pakistani Talks")
        false
    else if isFulfill : true
    else if cellAvailable(game true) == 0 : false
    else if isPlayable : true
    else :
        addOneCell(game "pakistan" "recruit" true)
        addOneCell(game "india" "recruit" true)
        false

defn opium (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    val name = "afghanistan"
    if getCell(game name) == 0 : false
    else if isFulfill: true
    else if cellAvailable(game true) == 0 : false
    else if isPlayable : true
    else :
        val original_cell = getCell(game name)
        do({addOneCell(game name "recruit" true)} 0 to 3)
        if getGovern(game name) == "islamrule" :
            while cellAvailable(game true) > 0:
                addOneCell(game name "recruit" true)
        declareCaliphate(game name original_cell)
        false

defn pirates (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if not (getGovern(game "somalia") == "islamrule" or getGovern(game "yemen") == "islamrule") :
        false
    else if isFulfill or isPlayable :
        true
    else :
        setMarker(game "markers" "pirates" true)
        true

defn schengenVisas (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if isFulfill : true
    else if getCellOnMap(game) == 0 : false
    else if isPlayable : true
    else :
        val tonames = Vector<String>()
        val fromnames = Vector<String>()
        do({
            val validCountries = extract(game fn (x) : (isSchengen(game x) and not contains?(tonames x)))
            label<False> break :
                match(queryCountry(comm(game) as Communicator player "Cell To?" validCountries append-all(["event=" to-string(card-id)]))) :
                    (name : String) :    
                        add(tonames name)
                        val validCountries = extract(game {getCell(game _ false) > 0})
                        val v = Vector<String>()
                        do( fn (name) :
                                var cell = getCell(game name false)
                                do({if _ == name : cell = cell - 1} fromnames)
                                if cell > 0 : add(v name)
                            validCountries
                        )
                        match(queryCountry(comm(game) as Communicator player "Cell from?" to-tuple(v) "travelfrom")) :
                            (fromname : String) :
                                add(fromnames fromname)
                            (f) : break(false)
                    (f) : break(false)
            }
            0 to 2
        )
        val len = min(length(tonames), length(fromnames))
        do( fn (fromname toname) :
                removeOneCell(game fromname)
                addOneCell(game toname "travelto" false)
            fromnames
            tonames
        )
        false

defn alJazeera (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    val validCountries = extract(
        game 
        fn (x) : (getTroopStrength(game x) > 0) and isMuslim(game x) and (not isUntested(game x)) and (getAlign(game x) != "adversary")
        adjacentRegion(game ["saudiarabia"])
    )
    if length(validCountries) == 0 : false
    else if isFulfill or isPlayable : true
    else :
        val name = queryCountry-noNull(comm(game) as Communicator player "Shift to Adversary" validCountries "align")
        shiftAlign(game name "adversary")
        false

defn axisOfEvil (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if isFulfill or isPlayable : true
    else if usplayer(game) != "bot" :
        val cards = [103 104 105 106]
        var discarded : True|False = true
        while discarded:
            discarded = false
            label<False> break :
                do( fn (uscard i) :
                        if contains?(cards uscard) :
                            discardOneCard(game "us" i)
                            discarded = true
                            break(false)
                    ushand(game)
                    0 to false
                )
    else :
        setPosture(game "us" "hard")
        rollPrestige(game)
        false

defn cleanOperatives (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if isFulfill : true
    else if getCellOnMap(game) == 0 : false
    else if isPlayable : true
    else :
        val tonames = Vector<String>()
        val fromnames = Vector<String>()
        label<False> break : do({
            val validCountries = extract(game {true})
            match(queryCountry(comm(game) as Communicator player "Cell to?" validCountries append-all(["event=" to-string(card-id)]))) :
                (toname : String) :
                    add(tonames toname)
                    val validCountries = extract(game {getCell(game _) > 0})
                    val v = Vector<String>()
                    do( fn (fromname) :
                            val cell = getCell(game fromname false) - count({_ == fromname} fromnames)
                            if cell > 0 : add(v fromname)
                        validCountries
                    )
                    match(queryCountry(comm(game) as Communicator player "Cell from?" to-tuple(v) "travelfrom")) :
                        (fromname : String) : add(fromnames fromname)
                        (f) : break(false)
                (f) : break(false)
            }
            0 to 2
        )
        val len = min(length(tonames), length(fromnames))
        do( fn (fromname toname) :
                removeOneCell(game fromname)
                addOneCell(game toname "travelto" false)
            fromnames
            tonames
        )
        false

defn foreignFighters (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game {isRegimeChange(game _)}) when card-id == 81 else
            extract(game fn (x) : (isCivilWar(game x) or isRegimeChange(game x))) when card-id == 187 else return(false)
        if length(validCountries) == 0 : return(false)
        if isFulfill : return(true)
        if cellAvailable(game true) == 0 : return(false)
        if isPlayable : return(true)
        val name = queryCountry-noNull(comm(game) as Communicator player "Place 5 Cells" validCountries "recruit")
        val original_cell = getCell(game name)
        do( {addOneCell(game name "recruit" true)} (0 to 5) )
        if getAid(game name) > 0:
            removeOneAid(game name)
        else:
            setBesiegedRegime(game name)
        declareCaliphate(game name original_cell)
        false

defn jihadistVideos (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        val validCountries = to-vector<String>(extract(game {getCell(game _) == 0}))
        if length(validCountries) == 0 : return(false)
        if isPlayable : return(true)
        label<False> break : do(
            {match(queryCountry(comm(game) as Communicator player "Place Cell or Cadre" to-tuple(validCountries) append-all(["event=" to-string(card-id)]))) :
                (name : String) :
                    testCountry(game name)
                    val need = getRecruitNum(game name)
                    if need == 6 or rollOnce(game) <= need:
                        ; success
                        if "" == addOneCell(game name "recruit" true) :
                            setCadre(game name)
                    else :
                        setCadre(game name)
                    remove-item(validCountries name)
                (f) : break(false)
            }
            0 to 3
        )
        false

defn kashmir (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if isMarker(game "india" "indopakistanitalks") : false
    else if isFulfill : true
    else if getAlign(game "pakistan") == "adversary" and cellAvailable(game true) == 0 : false
    else if isPlayable : true
    else :
        shiftAlign(game "pakistan" "adversary")
        addOneCell(game "pakistan" "recruit" true)
        false

defn martyrdomOperation (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    val validCountries = extract(game fn (x) : (getGovern(game x) != "islamrule" and getCell(game x) > 0))
    if length(validCountries) == 0:
        evprintln("No valid country")
        false
    else if isFulfill:
        true
    else if length(plotAvailables(game)) == 0:
        evprintln("No Plot")
        false
    else if isPlayable:
        true
    else :
        val name = queryCountry-noNull(comm(game) as Communicator player "Choose country to Plot" validCountries "eventplot")
        removeOneCellToTrack(game name false true)
        label<False> break : do({
            if length(plotAvailables(game)) == 0 : break(false)
            match(queryPlot(comm(game) as Communicator "Place Plot" plotAvailables(game) false)) :
                (plot : String|Int) :
                    placePlot(game name plot)
                (f) : false
            }
            0 to 2
        )
        false

defn quagmire (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    val validCountries = extract(game fn (x) : (isRegimeChange(game x) and getCell(game x) > 0))
    if length(validCountries) == 0 : false
    else if prestige(game) >= 7 : false
    else if isFulfill or isPlayable : true
    else :
        label<False> break : do( { 
            if length(ushand(game)) == 0 : 
                break(false)
            val discard-id = discardOneCard(game "us" (- 2))
            if discard-id != 200:
                remove-item(discard(game) discard-id)  ; retrieve it back temporarily
            val [ops assoc title] = getCardInfo(discard-id)
            if assoc == "Jihadist" :
                if playJihadistEvent(game discard-id true) :
                    if playJihadistEvent(game discard-id):
                        add(removed(game) discard-id)
                    else:
                        doDiscard(game discard-id)
            }
            0 to 2
        )
        setPosture(game "us" "soft")
        false

defn regionalAlQaeda (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    val validCountries = to-vector<String>(extract(game fn (x) : isMuslim(game x) and x != "iran" and isUntested(game x)))
    val len = length(validCountries)
    label<True|False> return :
        if len < 2:
            evprintln("Only %_ Muslim countries untested" % [len])
            return(false)
        if isFulfill : return(true)
        if cellAvailable(game true) == 0:
            evprintln("No cell")
            return(false)
        if isPlayable: return(true)
        val c = comm(game) as Communicator
        val name1 = queryCountry-noNull(c player "1st country to Place Cell" to-tuple(validCountries) "recruit")
        remove-item(validCountries name1)
        val name2 = queryCountry-noNull(c player "2nd country to Place Cell" to-tuple(validCountries) "recruit")
        val validCountries2 = extract(game {getGovern(game _) == "islamrule"})
        val unit = 2 when length(validCountries2) > 0 else 1
        do( { addOneCell(game name1 "recruit" true) addOneCell(game name2 "recruit" true) }
            0 to unit
        )
        false

defn taliban (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        if isBesiegedRegime(game "afghanistan") and cellAvailable(game true) == 0 and prestige(game) == 1:
            return(false)
        if isPlayable:
            return(true)
        setBesiegedRegime(game "afghanistan")
        addOneCell(game "afghanistan" "recruit" true)
        addOneCell(game "pakistan" "recruit" true)
        if getGovern(game "afghanistan") == "islamrule" or getGovern(game "pakistan") == "islamrule":
            changePrestige(game (- 3))
        else:
            changePrestige(game (- 1))
        false

defn wahhabism (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isUntested(game "saudiarabia") : return(false)
        if funding(game) == 9 : return(false)
        if isFulfill or isPlayable : return(true)
        val f = 999 when getGovern(game "saudiarabia") == "islamrule" else getGovernNum(game "saudiarabia")
        changeFunding(game f)
        false

defn fatwa (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    if not (length(ushand(game)) > 0 and length(jihadisthand(game)) > 0) : false
    else if isFulfill or isPlayable: true
    else :
        val uscard = drawFromHand(game "us" (- 2))
        val jihadistcard = drawFromHand(game "jihadist" (- 2))
        insert(ushand(game) 0 jihadistcard)
        insert(jihadisthand(game) 0 uscard)
        if player == "us" :
            playUSOps(game 1 true)
        else:
            playJihadistOps(game 1 true)
        false

defn hizbUtTahrir (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if player == "us" :
            if getTroopLevel(game) != "low" :
                return(false)
        else:
            if getTroopLevel(game) != "overstretch" :
                return(false)
        if isFulfill:
            return(true)
        if player == "us" :
            if funding(game) == 1 :
                return(false)
        else:
            if funding(game) == 9:
                return(false)
        if isPlayable:
            return(true)
        if player == "us" :
            changeFunding(game (- 2))
        else:
            changeFunding(game (- 2))
        false

defn kosovo (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        val usposture = getPosture(game "us")
        if prestige(game) == 12 and getPosture(game "serbia") == oppositePosture(usposture) :
            return(false)
        if isPlayable: return(true)
        changePrestige(game 1)
        setPosture(game "serbia" oppositePosture(usposture))
        false

defn hizballah (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        val region = adjacentRegion{game _} $ adjacentRegion{game _} $ adjacentRegion(game ["lebanon"])
        val validCountries = extract(game (fn (x) : (getCell(game x) > 0 and isShia(game x))) region)
        if player == "us" :
            if length(validCountries) == 0:
                return(false)
        else:
            if getGovern(game "lebanon") == "poor" and getAlign(game "lebanon") == "neutral" :
                return(false)
        if isPlayable:
            return(true)
        if player == "us" :
            val name = queryCountry-noNull(comm(game) as Communicator player "Remove a Cell" validCountries, "eventdisrupt")
            removeOneCellToTrack(game name true false)
        else:
            setGovern(game "lebanon" "poor")
            setAlign(game "lebanon" "neutral")
        false

defn iran (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        val shiaCountries = extract(game {isShia(game _)})
        if player == "us" :
            val cellCountries = extract(game {getCell(game _ true) > 0} shiaCountries)
            val untestedCountries = extract(game {isUntested(game _)} shiaCountries)
            if length(cellCountries) == 0 and getCell(game "iran" true) == 0 and length(untestedCountries) == 0:
                return(false)
        else:
            val validCountries = extract(
                game 
                fn (x) : (isUntested(game x) or getGovern(game x) == "good" or getGovern(game x) == "fair") 
                shiaCountries
            )
            if length(validCountries) == 0 : return(false)
        if isPlayable : return(true)
        val name = queryCountry-noNull(comm(game) as Communicator player "Test" shiaCountries append-all(["event=" to-string(card-id)]))
        testCountry(game name)
        if player == "us":
            val validCountries = Vector<String>()
            if getCell(game name true) > 0 :
                add(validCountries name)
            if getCell(game "iran" true) > 0:
                add(validCountries "iran")
            if length(validCountries) > 0:
                match(queryCountry(comm(game) as Communicator player "Remove a Cell" to-tuple(validCountries) "eventdisrupt")) :
                    (disrupt-name : String) : removeOneCellToTrack(game disrupt-name true false)
                    (f) : false
        else:
            minorjihad(game [name name] true)
        false

defn jayshAlMahdi (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game fn (x) : (isShia(game x) and getTroopStrength(game x) > 0 and getCell(game x) > 0))
        if length(validCountries) == 0:
            return(false)
        if isFulfill:
            return(true)
        if player == "jihadist":
            val validCountries2 = extract(game fn (x) : (getGovern(game x) == "good" and getGovern(game x) == "fair") validCountries)
            if length(validCountries) == 0:
                return(false)
        if isPlayable:
            return(true)
        val [reason msg] = ["eventdisrupt" "Remove Cells"] when player == "us" else ["govern" "Worsen Governance"]
        match(queryCountry(comm(game) as Communicator player msg validCountries reason)) :
            (name : String) :
                if player == "us" :
                    do( {removeOneCellToTrack(game name true false)}
                        0 to 2 )
                else:
                    worsenGovern(game name)
            (f) : false
        false

defn kurdistan (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        if player == "jihadist" : 
            if getGovern(game "turkey") == "poor" and getGovern(game "iraq") == "poor" :
                return(false)
        if isPlayable : return(true)
        if player == "us" :
            addOneAid(game "iraq" true)
        else:
            testCountry(game "turkey")
            val validCountries = Vector<String>()
            if getGovern(game "turkey") != "poor":
                add(validCountries "turkey")
            if getGovern(game "iraq") != "poor":
                add(validCountries "iraq")
            if length(validCountries) > 0:
                match(queryCountry(comm(game) as Communicator player "Worsen Governance" to-tuple(validCountries) "govern")) :
                    (name : String) : worsenGovern(game name)
                    (f) : false
        false

defn musharraf (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isMarker(game "pakistan" "benazirbhutto") :
            return(false)
        if getCell(game "pakistan") == 0:
            return(false)
        if isFulfill or isPlayable:
            return(true)
        if player == "us" :
            removeOneCellToTrack(game "pakistan" true false)
        else:
            removeOneCellToTrack(game "pakistan" false false)
        setGovern(game "pakistan" "poor")
        setAlign(game "pakistan" "ally")
        false

defn zarqawi (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val countries = extract(game {getTroopStrength(game _) > 0} ["iraq" "syria" "lebanon" "jordan"])
        if length(countries) == 0:
            return(false)
        if isFulfill:
            return(true)
        if cellAvailable(game true) == 0 and not contains?(plotAvailables(game) 2):
            return(false)
        if isPlayable:
            return(true)
        val name = queryCountry-noNull(comm(game) as Communicator player "Choose Country to Place cells and Plot 2." countries "eventplot")
        val original_cell = getCell(game name)
        do({addOneCell(game name "recruit" true)} 0 to 3)
        if contains?(plotAvailables(game) 2) :
            placePlot(game name 2)
        declareCaliphate(game name original_cell)
        false

; starting to use ? function for governance and posture
defn zawahiri (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game {islamrule?(game _)})
        if player == "us":
            if length(validCountries) > 0:
                return(false)
            if isMarker(game "pakistan" "fata") :
                return(false)
            if isMarker(game "iraq" "alanbar") :
                return(false)
        if isFulfill:
            return(true)
        if player == "us":
            if funding(game) == 1:
                return(false)
        else:
            if prestige(game) == 1:
                return(false)
        if isPlayable:
            return(true)
        if player == "us":
            changeFunding(game (- 2))
            return(true)
        val change = (- 3) when length(validCountries) > 0 else (- 1)
        changePrestige(game change)
        false

defn binLadin (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        val validCountries = extract(game {islamrule?(game _)})
        if player == "us":
            if length(validCountries) > 0:
                return(false)
            if isMarker(game "pakistan" "fata") :
                return(false)
            if isMarker(game "iraq" "alanbar") :
                return(false)
        if isFulfill : return(true)
        if player == "us" :
            if funding(game) == 1 and prestige(game) == 12:
                return(false)
        else :
            if prestige(game) == 1:
                return(false)
        if isPlayable : return(true)
        if player == "us" :
            changeFunding(game (- 4))
            changePrestige(game 1)
            return(true)
        val change = (- 4) when length(validCountries) > 0 else (- 2)
        changePrestige(game change)
        false

defn darfur (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill or isPlayable : return(true)
        val name = "sudan"
        testCountry(game name)
        if prestige(game) >= 7:
            addOneAid(game name true)
            shiftAlign(game name "ally")
        else:
            setBesiegedRegime(game name)
            shiftAlign(game name "adversary")
        false

defn oilPriceSpike (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill or isPlayable : return(true)
        val validAnswers = to-vector<Int>(discard(game))
        remove-item(validAnswers 117)
        remove-item(validAnswers 118)
        remove-item(validAnswers 236)
        if length(validAnswers) == 0:
            evprintln("No card to retrieve")
        else:
            val ans = queryNumber(
                        comm(game) as Communicator 
                        player "Which card to retrieve?" 
                        validAnswers append-all(["event=" to-string(card-id)])
                        getDisplays(game, validAnswers)
                        false
            )
            match(ans) :
                (ans : Int) :
                    if player == "us":
                        insert(ushand(game) 0 ans)
                    else:
                        insert(jihadisthand(game) 0 ans)
                    remove-item(discard(game) ans)
                    remove-item(lapsing(game) ans)
                (f) : false
        add(lapsing(game) card-id)
        ; cancel Fracking. How?
        false

defn saleh (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill : return(true)
        if player == "us":
            if islamrule?(game "yemen") : return(false)
        else:
            if adversary?(game "yemen") and isBesiegedRegime(game "yemen") : return(false)
        if isPlayable : return(true)
        testCountry(game "yemen")
        if player == "us" :
            if islamrule?(game "yemen") :
                shiftAlign(game "yemen" "ally")
                addOneAid(game "yemen" true)
        else :
            shiftAlign(game "yemen" "adversary")
            setBesiegedRegime(game "yemen")
        false

defn USElection (game : Labyrinth card-id : Int player : String isPlayable : True|False isFulfill : True|False) -> True|False :
    label<True|False> return :
        if isFulfill or isPlayable : return(true)
        rollPosture(game "us" 0)
        if getGWOTPenalty(game) == 0:
            changePrestige(game 1)
        else:
            changePrestige(game (- 1))
        false


;deftype EventFunc <: (Labyrinth Int String True|False True|False) -> True|False
;deftype EventTable <: Tuple<KeyValue<Int, ((Labyrinth Int String True|False True|False) -> True|False)>>

val jihadistEventTable = [
    49 => alIttihadAlIslami
    50 => ansarAlIslam
    51 => FREs
    52 => IEDs 
    53 => madrassas 
    55 => uyghurJihad
    60 => bhuttoShot
    63 => gazaWar
    68 => jemaahIslamiya
    70 => lashkarETayyiba
    72 => opium
    73 => pirates
    74 => schengenVisas
    77 => alJazeera
    78 => axisOfEvil
    79 => cleanOperatives
    81 => foreignFighters
    82 => jihadistVideos
    83 => kashmir
    89 => martyrdomOperation
    90 => quagmire
    91 => regionalAlQaeda
    93 => taliban
    95 => wahhabism
    97 => fatwa
    100 => hizbUtTahrir 101 => kosovo 103 => hizballah
    104 => iran 105 => iran 106 => jayshAlMahdi
    107 => kurdistan 108 => musharraf 110 => zarqawi
    111 => zawahiri 112 => binLadin 113 => darfur
    117 => oilPriceSpike 118 => oilPriceSpike 119 => saleh 120 => USElection
]

val usEventTable = [
    1 => backlash 10 => specialForces 12 => alAzhar 13 => anbarAwakening
    15 => ethiopiaStrikes 16 => euroIslam 18 => intelCommunity 19 => kemalistRepublic
    20 => kingAbdullah 21 => letsRoll 22 => mossadAndShinBet 24 => predator
    25 => predator 28 => sharia 29 => tonyBlair 30 => UNNationBuilding
    32 => backChannel 33 => benazirBhutto 35 => hijab
    36 => indoPakistaniTalks 40 => massTurnout 42 => pakistaniOffensive
    45 => saferNow 46 => sistani 97 => fatwa
    100 => hizbUtTahrir 101 => kosovo 103 => hizballah
    104 => iran 105 => iran 106 => jayshAlMahdi
    107 => kurdistan 108 => musharraf 111 => zawahiri
    112 => binLadin 113 => darfur 117 => oilPriceSpike
    118 => oilPriceSpike 119 => saleh 120 => USElection
]

;defstruct EventTable :
;    t : HashTable<Int, ((Labyrinth, Int, String, True|False, True|False) -> True|False)>
;
;defn get (e : EventTable, card-id : Int) -> False|((Labyrinth, Int, String, True|False, True|False) -> True|False) :
;    get?(t(e), card-id);
;
;val usEventTable = EventTable(HashTable<Int, ((Labyrinth, Int, String, True|False, True|False) -> True|False)>())

defn playEvent (game : Labyrinth, player : String, card-id : Int
                eventTable : Tuple<KeyValue<Int, ((Labyrinth Int String True|False True|False) -> True|False)>>
                isPlayable : True|False) -> True|False :
    label<True|False> return :
        match(lookup?(eventTable card-id)) :
            (func : ((Labyrinth Int String True|False True|False) -> True|False)) :
                if not isPlayable:
                    ; assert card != 32
                    add(eventUsed(game) card-id)
                val eventString = getEventString(player card-id)
                val condition = false when eventString[0] is False else eventString[0] as String
                var description = false when eventString[1] is False else eventString[1] as String
                if isPlayable:
                    ; come from Bot flowchart
                    evprintln("isPlayable?")
                    return(func(game, card-id, player, isPlayable, false))
                else:
                    ; come from oppoEvent
                    val cardInfo = getCardInfo(card-id)
                    if cardInfo is [Int, String, String] :
                        val [ops assoc title]  = cardInfo as [Int String String]
                        evprintln(to-string("[%_] [%_] '%_':" % [ops assoc title]))
                        evprintln $ showEvent(player card-id)
                        ;evprintln(to-string("Prerequisite:%_" % [condition]))
                        ;evprintln(to-string("Game Effect:%_" % [description]))
                        if func(game card-id player false true) :
                            if queryEventPlayable(comm(game) as Communicator player card-id):
                                evprintln("Playing Event...")
                                return(func(game card-id player false false))
                        else:
                            evprintln("Condition not fulfilled")
                    
            (f) : evprintln("Event not found")
        false

public defn playJihadistEvent (game : Labyrinth card-id : Int isPlayable : True|False) -> True|False :
    playEvent(game "jihadist" card-id jihadistEventTable isPlayable)

public defn playJihadistEvent (game : Labyrinth card-id : Int) -> True|False :
    playJihadistEvent(game card-id false)


public defn playUSEvent (game : Labyrinth, card-id : Int, isPlayable : True|False) -> True|False :
    playEvent(game "us" card-id usEventTable isPlayable)

public defn playUSEvent (game : Labyrinth card-id : Int) -> True|False :
    playUSEvent(game card-id false)