defpackage sdl2 :
   import core
   import collections

val SDL_INIT_TIMER =          0x00000001
val SDL_INIT_AUDIO =          0x00000010
val SDL_INIT_VIDEO =          0x00000020  ;/**< SDL_INIT_VIDEO implies SDL_INIT_EVENTS */
val SDL_INIT_JOYSTICK =       0x00000200  ;/**< SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS */
val SDL_INIT_HAPTIC =         0x00001000
val SDL_INIT_GAMECONTROLLER = 0x00002000  ;/**< SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK */
val SDL_INIT_EVENTS =         0x00004000
val SDL_INIT_SENSOR =         0x00008000

val SDL_INIT_EVERYTHING = SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER | SDL_INIT_SENSOR 

val SDL_WINDOWPOS_UNDEFINED   : Int = 0x1fff0000
val SDL_WINDOWPOS_CENTERED    : Int = 0x2fff0000

val IMG_INIT_JPG  : Int = 1
val IMG_INIT_PNG  : Int = 2
val IMG_INIT_TIF  : Int = 4
val IMG_INIT_WEBP : Int = 8

val SDL_WINDOW_FULLSCREEN = 0x00000001,         ;/**< fullscreen window */
val SDL_WINDOW_OPENGL = 0x00000002,             ;/**< window usable with OpenGL context */
val SDL_WINDOW_SHOWN = 0x00000004,              ;/**< window is visible */
val SDL_WINDOW_HIDDEN = 0x00000008,             ;/**< window is not visible */
val SDL_WINDOW_BORDERLESS = 0x00000010,         ;/**< no window decoration */
val SDL_WINDOW_RESIZABLE = 0x00000020,          ;/**< window can be resized */
val SDL_WINDOW_MINIMIZED = 0x00000040,          ;/**< window is minimized */
val SDL_WINDOW_MAXIMIZED = 0x00000080,          ;/**< window is maximized */
val SDL_WINDOW_MOUSE_GRABBED = 0x00000100,      ;/**< window has grabbed mouse input */
val SDL_WINDOW_INPUT_FOCUS = 0x00000200,        ;/**< window has input focus */
val SDL_WINDOW_MOUSE_FOCUS = 0x00000400,        ;/**< window has mouse focus */
val SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN | 0x00001000 ),
val SDL_WINDOW_FOREIGN = 0x00000800,            ;/**< window not created by SDL */
val SDL_WINDOW_ALLOW_HIGHDPI = 0x00002000,      ;/**< window should be created in high-DPI mode if supported.
                                                ;     On macOS NSHighResolutionCapable must be set true in the
                                                ;     application's Info.plist for this to have any effect. */
val SDL_WINDOW_MOUSE_CAPTURE    = 0x00004000,   ;/**< window has mouse captured (unrelated to MOUSE_GRABBED) */
val SDL_WINDOW_ALWAYS_ON_TOP    = 0x00008000,   ;/**< window should always be above others */
val SDL_WINDOW_SKIP_TASKBAR     = 0x00010000,   ;/**< window should not be added to the taskbar */
val SDL_WINDOW_UTILITY          = 0x00020000,   ;/**< window should be treated as a utility window */
val SDL_WINDOW_TOOLTIP          = 0x00040000,   ;/**< window should be treated as a tooltip */
val SDL_WINDOW_POPUP_MENU       = 0x00080000,   ;/**< window should be treated as a popup menu */
val SDL_WINDOW_KEYBOARD_GRABBED = 0x00100000,   ;/**< window has grabbed keyboard input */
val SDL_WINDOW_VULKAN           = 0x10000000,   ;/**< window usable for Vulkan surface */
val SDL_WINDOW_METAL            = 0x20000000,   ;/**< window usable for Metal view */

lostanza deftype SDL_version :
   major: byte
   minor: byte
   patch: byte

lostanza deftype SDL_Rect :
   x: int
   y: int
   w: int
   h: int

lostanza defn SDL_Rect (x:ref<Int>, y:ref<Int>, w:ref<Int>, h:ref<Int>) -> ref<SDL_Rect> :
   return new SDL_Rect{x.value, y.value, w.value, h.value}

lostanza defn SDL_RGBA (r:ref<Byte>, g:ref<Byte>, b:ref<Byte>, a:ref<Byte>) -> ref<Int> :
   return new Int{a.value << 24 + r.value << 16 + g.value << 8 + b.value}

extern SDL_GetVersion: (ptr<SDL_version>) -> int
extern SDL_Init: int -> int
extern SDL_Quit: () -> int
extern SDL_CreateWindow: (ptr<byte>, int, int, int, int, int) -> long
extern SDL_GetWindowID: (long) -> int
extern SDL_DestroyWindow: (long) -> int
extern SDL_GetWindowSurface: (long) -> long
extern SDL_CreateRGBSurface: (int, int, int, int, int, int, int, int) -> int
extern SDL_FreeSurface: (long) -> int
extern SDL_ConvertSurface: (long, long, int) -> long
extern SDL_UpperBlit: (long, ptr<SDL_Rect>, long, ptr<SDL_Rect>) -> int
extern SDL_UpperBlitScaled: (long, ptr<SDL_Rect>, long, ptr<SDL_Rect>) -> int
extern SDL_FillRect: (long, ptr<SDL_Rect>, int) -> int
extern SDL_UpdateWindowSurface: (long) -> int
extern IMG_Init: int -> int
extern IMG_Quit: () -> int
extern IMG_Load: (ptr<byte>) -> long
extern SDL_PollEvent: (ptr<SDL_Event>) -> int
extern SDL_Delay: (int) -> int
extern SDL_SetSurfaceBlendMode: (long, int) -> int
extern TTF_Init: () -> int
extern TTF_OpenFont: (ptr<byte>, int) -> long
extern TTF_RenderText_Blended: (long, ptr<byte>, int) -> long

lostanza defn call-SDL_version () -> ref<Int> :
   val v = new SDL_version{0Y, 0Y, 0Y}
   call-c SDL_GetVersion(addr!([v])) 
   return new Int{v.major}

lostanza defn call-SDL_Init (a:ref<Int>) -> ref<Int> :
   val result = call-c SDL_Init(a.value)
   return new Int{result}

lostanza defn call-SDL_Quit () -> ref<False> :
   call-c SDL_Quit()
   return false

lostanza defn call-SDL_CreateWindow (name : ref<String>, width : ref<Int>, height : ref<Int>) -> ref<Long> :
   val p = call-c SDL_CreateWindow(
                           addr!(name.chars), 
                           SDL_WINDOWPOS_CENTERED.value, SDL_WINDOWPOS_CENTERED.value, 
                           width.value, height.value, 
                           SDL_WINDOW_RESIZABLE.value)
   return new Long{p}

lostanza defn call-SDL_GetWindowID ( window : ref<Long> ) -> ref<Int> :
   val win-id = call-c SDL_GetWindowID(window.value)
   return new Int{win-id}

lostanza defn call-SDL_DestroyWindow (window : ref<Long>) -> ref<False> :
   call-c SDL_DestroyWindow(window.value)
   return false

lostanza defn call-SDL_GetWindowSurface (p : ref<Long>) -> ref<Long> :
   val ws = call-c SDL_GetWindowSurface(p.value)
   return new Long{ws}

lostanza defn SDL-surface-w (p : ref<Long>) -> ref<Int> :
   return new Int{[(p.value + 16) as ptr<int>]}
lostanza defn SDL-surface-h (p : ref<Long>) -> ref<Int> :
   return new Int{[(p.value + 20) as ptr<int>]}

lostanza defn call-SDL_FillRect (p : ref<Long>, rect : ref<SDL_Rect|False>, argb : ref<Int>) -> ref<Int> :
   var pRect : ptr<SDL_Rect>
   match(rect) :
      (rect : ref<SDL_Rect>) : pRect = addr!([rect])
      (rect) : pRect = null as ptr<SDL_Rect>
   val result = call-c SDL_FillRect(p.value, pRect, argb.value)
   return new Int{result}

lostanza defn call-SDL_UpdateWindowSurface (window : ref<Long>) -> ref<Int> :
   val result = call-c SDL_UpdateWindowSurface(window.value)
   return new Int{result}

lostanza defn call-SDL_CreateRGBSurface (w : ref<Int>, h : ref<Int>) -> ref<Long> :
   val result = call-c SDL_CreateRGBSurface(0, w.value, h.value, 32, 0xff, 0xff00, 0xff0000, 0xff000000)
   return new Long{result}

lostanza defn call-SDL_FreeSurface (surface : ref<Long> ) -> ref<False> :
   call-c SDL_FreeSurface(surface.value)
   return false

lostanza defn call-SDL_ConvertSurface (surface : ref<Long>, dst_surface : ref<Long>) -> ref<Long> :
   ; NOTE!!!!!! this function is not the same as that in SDL
   ; the trick is
   ; * format is right after Unit32 flags
   ; dst_surface.value + 8 points to the *format pointer
   ; [dst_surface.value+8] is the value we want
   ; 
   val ad = dst_surface.value + 8     ; skip the flags (internal). Assume 64-bit. Change this to 4 in 32-bit
   val p : ptr<long> = ad as ptr<long>
   val result = call-c SDL_ConvertSurface(surface.value, [p], 0)
   return new Long{result}

lostanza defn pRect (rect : ref<SDL_Rect|False>) -> ptr<SDL_Rect> :
   match(rect) :
      (rect : ref<SDL_Rect>) : return addr!([rect])
      (rect) : return null as ptr<SDL_Rect>
   
; See this issue: https://github.com/BindBC/bindbc-sdl/issues/15
; Use SDL_UpperBlit and SDL_UpperBlitScaled
lostanza defn call-SDL_BlitSurface (src : ref<Long>, src-rect : ref<SDL_Rect|False>, 
                                    dst : ref<Long>, dst-rect : ref<SDL_Rect|False>) -> ref<True|False> :
   val p-src-rect = pRect(src-rect)
   val p-dst-rect = pRect(dst-rect)
   val result = call-c SDL_UpperBlit( src.value, p-src-rect, dst.value, p-dst-rect )
   if result == 0 :
      return true
   else :
      return false

lostanza defn call-SDL_BlitScaled  (src : ref<Long>, src-rect : ref<SDL_Rect|False>, 
                                    dst : ref<Long>, dst-rect : ref<SDL_Rect|False>) -> ref<True|False> :
   val p-src-rect = pRect(src-rect)
   val p-dst-rect = pRect(dst-rect)
   val result = call-c SDL_UpperBlitScaled( src.value, p-src-rect, dst.value, p-dst-rect )
   if result == 0 :
      return true
   else :
      return false

lostanza defn call-IMG_Init (flags : ref<Int>) -> ref<True|False> :
   val result = call-c IMG_Init(flags.value)
   if ( result & flags.value ) == flags.value :
      return true
   else :
      return false

lostanza defn call-IMG_Quit () -> ref<False> :
   call-c IMG_Quit()
   return false

lostanza defn call-IMG_Load (filename : ref<String>) -> ref<Long> :
   val result = call-c IMG_Load(addr!(filename.chars))
   return new Long{result} 

lostanza defn call-SDL_Delay (ms : ref<Int>) -> ref<False> :
   call-c SDL_Delay(ms.value)
   return false

; use 10 integers. If it is found that more is needed, we can add later
lostanza deftype SDL_Event :
   type      : int
   timestamp : int
   window-id : int
   event1    : int
   event2    : int
   event3    : int
   event4    : int
   event5    : int
   event6    : int
   event7    : int
   event8    : int
   event9    : int
   event10   : int
   event11   : int

lostanza defn call-SDL_PollEvent () -> ref<SDL_Event|False> :
   val e = new SDL_Event{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
   val result = call-c SDL_PollEvent(addr!([e]))
   if result != 0 :
      return new SDL_Event{e.type e.timestamp e.window-id e.event1 e.event2 e.event3 e.event4 e.event5 
         e.event6 e.event7 e.event8 e.event9 e.event10 e.event11}
   else:
      return false

lostanza defn getFloat (e : ref<SDL_Event> index : ref<Int>) -> ref<Float> :
   val p = addr!(e.event1)
   val f = p as ptr<float>
   val v = f[index.value]
   return new Float{v}
lostanza defn type (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.type}
lostanza defn timestamp (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.timestamp}
lostanza defn window-id (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.window-id}
lostanza defn event1 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event1}
lostanza defn event2 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event2}
lostanza defn event3 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event3}
lostanza defn event4 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event4}
lostanza defn event5 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event5}
lostanza defn event6 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event6}
lostanza defn event7 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event7}
lostanza defn event8 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event8}
lostanza defn event9 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event9}
lostanza defn event10 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event10}
lostanza defn event11 (e:ref<SDL_Event>) -> ref<Int> :
   return new Int{e.event11}

lostanza defn call-SDL_SetSurfaceBlendMode (surface : ref<Long> mode : ref<Int>) -> ref<Int> :
   val result = call-c SDL_SetSurfaceBlendMode(surface.value mode.value)
   return new Int{result}

lostanza defn call-TTF_Init () -> ref<Int> :
   val result = call-c TTF_Init()
   return new Int{result}

lostanza defn call-TTF_OpenFont (fontname : ref<String>, size : ref<Int>) -> ref<Long> :
   val result = call-c TTF_OpenFont(addr!(fontname.chars), size.value)
   return new Long{result} 

lostanza defn call-TTF_RenderText_Blended (font : ref<Long>, text : ref<String>, color : ref<Int>) -> ref<Long> :
   val surface = call-c TTF_RenderText_Blended(font.value, addr!(text.chars), color.value)
   return new Long{surface}

; ================
; pulbic interface
; ================
public defstruct SDL-rect :
   x : Int
   y : Int
   w : Int
   h : Int

public defmethod print (o : OutputStream r : SDL-rect) :
   print(o, "x=%_ y=%_ w=%_ h=%_" % [x(r) y(r) w(r) h(r)])

public defn sdl-init () -> Int :
   val result = call-SDL_Init(SDL_INIT_EVERYTHING)
   println("SDL_Init:%_" % [result])
   if result == 0 :
      val img_result = call-IMG_Init(IMG_INIT_JPG|IMG_INIT_PNG)
      println("IMG_Init: %_" % [img_result])
      val ttf-result = call-TTF_Init()
      println("TTF_Init: %_" % [ttf-result])
   result

public defn sdl-create-window (name : String, width : Int, height : Int) -> [Long Long] :
   val window = call-SDL_CreateWindow(name, width, height)
   val win-surface = call-SDL_GetWindowSurface(window)
   [window, win-surface]

public defn sdl-get-window-id (window : Long) -> Int :
   call-SDL_GetWindowID(window)

public defn sdl-open-font (fontname : String size : Int) -> Long :
   call-TTF_OpenFont(fontname size)

public defn sdl-get-window-surface (window : Long) -> Long :
   call-SDL_GetWindowSurface(window)

public defn sdl-create-surface (size : [Int Int]) -> Long :
   call-SDL_CreateRGBSurface(size[0] size[1])

public defn sdl-free-surface (img-surface : Long) -> False :
   call-SDL_FreeSurface(img-surface)

public defn sdl-load-image (name : String, win-surface : Long ) -> Long :
   val img-surface = call-IMG_Load(name)
   if img-surface != 0L :
      val opt-surface = call-SDL_ConvertSurface(img-surface, win-surface)
      call-SDL_FreeSurface(img-surface)
      opt-surface
   else :
      0L

public defn sdl-clear-surface (surface : Long) :
   call-SDL_FillRect(surface, false, SDL_RGBA(0Y, 0Y, 0Y, 0Y))

public defstruct SDL-color :
   r : Byte
   g : Byte
   b : Byte
   a : Byte

public defn sdl-fill-rect (surface : Long rect : SDL-rect|False color : SDL-color) :
   val c = (to-int $ a(color)) << 24 + (to-int $ b(color)) << 16 + (to-int $ g(color)) << 8 + (to-int $ r(color))
   val r = match(rect) :
      (rect : SDL-rect) :
         SDL_Rect(x(rect) y(rect) w(rect) h(rect))
      (f) : false
   call-SDL_FillRect(surface r c)

public defn sdl-overlay (src : Long, src-rect : SDL-rect|False, dst : Long, dst-rect : SDL-rect|False) :
   val lo-src-rect : SDL_Rect|False = 
      SDL_Rect(x(src-rect as SDL-rect), y(src-rect as SDL-rect), w(src-rect as SDL-rect), h(src-rect as SDL-rect)) when src-rect is-not False else false
   val lo-dst-rect : SDL_Rect|False = 
      SDL_Rect(x(dst-rect as SDL-rect), y(dst-rect as SDL-rect), w(dst-rect as SDL-rect), h(dst-rect as SDL-rect)) when dst-rect is-not False else false
   call-SDL_BlitScaled(src, lo-src-rect, dst, lo-dst-rect)
   
public defn sdl-update (window : Long):
   call-SDL_UpdateWindowSurface(window)

public defn sdl-surface-size (surface : Long) -> [Int Int] :
   [SDL-surface-w(surface) SDL-surface-h(surface)]

; copied fro SDL_events.h
val SDL_FIRSTEVENT     = 0,     ; /**< Unused (do not remove) */
; /* Application events */
public val SDL_QUIT           = 0x100, ; /**< User-requested quit */

; /* These application events have special meaning on iOS, see README-ios.md for details */
val SDL_APP_TERMINATING = 0x101,    ; /**< The application is being terminated by the OS
                                    ; Called on iOS in applicationWillTerminate()
                                    ; Called on Android in onDestroy()
                                    ; */
val SDL_APP_LOWMEMORY = 0x102,      ; /**< The application is low on memory, free memory if possible.
                                    ; Called on iOS in applicationDidReceiveMemoryWarning()
                                    ; Called on Android in onLowMemory()
                                    ; */
val SDL_APP_WILLENTERBACKGROUND = 0x103,  ; /**< The application is about to enter the background
                                          ; Called on iOS in applicationWillResignActive()
                                          ; Called on Android in onPause()
                                          ; */
val SDL_APP_DIDENTERBACKGROUND = 0x104,   ; /**< The application did enter the background and may not get CPU for some time
                                          ; Called on iOS in applicationDidEnterBackground()
                                          ; Called on Android in onPause()
                                          ; */
val SDL_APP_WILLENTERFOREGROUND = 0x105,  ; /**< The application is about to enter the foreground
                                          ; Called on iOS in applicationWillEnterForeground()
                                          ; Called on Android in onResume()
                                          ; */
val SDL_APP_DIDENTERFOREGROUND = 0x106,   ; /**< The application is now interactive
                                          ; Called on iOS in applicationDidBecomeActive()
                                          ; Called on Android in onResume()
                                          ; */
val SDL_LOCALECHANGED = 0x107,   ; /**< The user's locale preferences have changed. */

   ; /* Display events */
val SDL_DISPLAYEVENT   = 0x150,  ;  /**< Display state change */

   ; /* Window events */
val SDL_WINDOWEVENT    = 0x200, ; /**< Window state change */
val SDL_SYSWMEVENT = 0x201,   ;             /**< System specific event */

   ; /* Keyboard events */
val SDL_KEYDOWN        = 0x300,  ; /**< Key pressed */
val SDL_KEYUP = 0x301,           ; /**< Key released */
val SDL_TEXTEDITING = 0x302,     ; /**< Keyboard text editing (composition) */
val SDL_TEXTINPUT = 0x303,       ; /**< Keyboard text input */
val SDL_KEYMAPCHANGED = 0x304,   ; /**< Keymap changed due to a system event such as an
                                 ; input language or keyboard layout change.
                                 ; */

   ; /* Mouse events */
val SDL_MOUSEMOTION    = 0x400,  ; /**< Mouse moved */
val SDL_MOUSEBUTTONDOWN = 0x401, ; /**< Mouse button pressed */
val SDL_MOUSEBUTTONUP = 0x402,   ; /**< Mouse button released */
val SDL_MOUSEWHEEL = 0x403,      ; /**< Mouse wheel motion */

; /* Gesture events */
val SDL_DOLLARGESTURE   = 0x800,
val SDL_DOLLARRECORD = 0x801,
val SDL_MULTIGESTURE = 0x802,

   ;/* Audio hotplug events */
val SDL_AUDIODEVICEADDED = 0x1100,     ; /**< A new audio device is available */
val SDL_AUDIODEVICEREMOVED = 0x1101,   ; /**< An audio device has been removed. */

   ; /* Sensor events */
val SDL_SENSORUPDATE = 0x1200,   ; /**< A sensor was updated */

   ; /* Render events */
val SDL_RENDER_TARGETS_RESET = 0x2000, ; /**< The render targets have been reset and their contents need to be updated */
val SDL_RENDER_DEVICE_RESET = 0x2001,  ; /**< The device has been reset and all textures need to be recreated */

   ; /* Internal events */
val SDL_POLLSENTINEL = 0x7F00,   ; /**< Signals the end of an event poll cycle */

   ; /** Events ::SDL_USEREVENT through ::SDL_LASTEVENT are for your use,
   ;  *  and should be allocated with SDL_RegisterEvents()
   ; */
val SDL_USEREVENT    = 0x8000,

   ; /**
   ;  *  This last event is only for bounding internal arrays
   ;  */
val SDL_LASTEVENT    = 0xFFFF
; } SDL_EventType;


; copied from SDL_video.h
;typedef enum
;{
val SDL_WINDOWEVENT_NONE = 0  ;/**< Never used */
val SDL_WINDOWEVENT_SHOWN = 1 ;   /**< Window has been shown */
val SDL_WINDOWEVENT_HIDDEN = 2 ;         /**< Window has been hidden */
public val SDL_WINDOWEVENT_EXPOSED = 3 ; /**< Window has been exposed and should be redrawn */
val SDL_WINDOWEVENT_MOVED = 4 ; /**< Window has been moved to data1, data2 */
val SDL_WINDOWEVENT_RESIZED = 5 ;/**< Window has been resized to data1xdata2 */
public val SDL_WINDOWEVENT_SIZE_CHANGED = 6 ; /**< The window size has changed, either as
                                     ;    a result of an API call or through the
                                     ;    system or user changing the window size. */
val SDL_WINDOWEVENT_MINIMIZED = 7 ;      /**< Window has been minimized */
val SDL_WINDOWEVENT_MAXIMIZED = 8 ;     /**< Window has been maximized */
val SDL_WINDOWEVENT_RESTORED = 9  ;      /**< Window has been restored to normal size
                                   ;      and position */
val SDL_WINDOWEVENT_ENTER = 10   ;/**< Window has gained mouse focus */
val SDL_WINDOWEVENT_LEAVE = 11          ;/**< Window has lost mouse focus */
public val SDL_WINDOWEVENT_FOCUS_GAINED = 12   ;/**< Window has gained keyboard focus */
val SDL_WINDOWEVENT_FOCUS_LOST = 13     ;/**< Window has lost keyboard focus */
public val SDL_WINDOWEVENT_CLOSE = 14          ;/**< The window manager requests that the window be closed */
val SDL_WINDOWEVENT_TAKE_FOCUS = 15     ;/**< Window is being offered a focus (should SetWindowInputFocus() on itself or a subwindow, or ignore) */
val SDL_WINDOWEVENT_HIT_TEST = 16       ;/**< Window had a hit test that wasn't SDL_HITTEST_NORMAL. */
val SDL_WINDOWEVENT_ICCPROF_CHANGED = 17 ;/**< The ICC profile of the window's display has changed. */
val SDL_WINDOWEVENT_DISPLAY_CHANGED = 18 ;/**< Window has been moved to display data1. */
; } SDL_WindowEventID;



; generic SDL-event
public deftype SDL-event

public defstruct SDL-generic-event <: SDL-event :
   type      : Int
   timestamp : Int
   window-id : Int
   event1    : Int
   event2    : Int
   event3    : Int
   event4    : Int
   event5    : Int
   event6    : Int
   event7    : Int
   event8    : Int
   event9    : Int
   event10   : Int
   event11   : Int
 
public defstruct SDL-window-event <: SDL-event :
   type      : Int
   timestamp : Int
   window-id : Int
   event     : Int
   data1     : Int
   data2     : Int

public defstruct SDL-mouse-motion-event <: SDL-event :
   type      : Int
   timestamp : Int
   window-id : Int
   which     : Int
   state     : Int
   x         : Int
   y         : Int
   xrel      : Int
   yrel      : Int

public defstruct SDL-mouse-button-event <: SDL-event :
   type      : Int
   timestamp : Int
   window-id : Int
   which     : Int
   button    : Byte
   state     : Byte
   clicks    : Byte
   x         : Int
   y         : Int

public defstruct SDL-keyboard-event <: SDL-event :
   type      : Int
   timestamp : Int
   window-id : Int
   state     : Byte
   repeats   : Byte
   scancode  : Int
   sym       : Int
   mod       : Int

public defstruct SDL-multigesture-event <: SDL-event :
   type      : Int
   timestamp : Int
   device-id : Long
   dTheta    : Float
   dDistance : Float
   x         : Float
   y         : Float
   numFingers : Int
   
defmethod print ( o : OutputStream, e : SDL-generic-event ) :
   println(o, "[type=%_ timestamp=%_ window-id=%_] " % [type(e) timestamp(e) window-id(e)] )
   print(o, "event1=%_ event2=%_ event3=%_ event4=%_ event5=%_ event6=%_ event7=%_ event8=%_ event9=%_ event10=%_ event11=%_" 
      % [event1(e) event2(e) event3(e) event4(e) event5(e) event6(e) event7(e) event8(e) event9(e) event10(e) event11(e)])

defmethod print ( o : OutputStream, e : SDL-window-event ) :
   println(o, "[type=%_ timestamp=%_ window-id=%_] " % [type(e) timestamp(e) window-id(e)] )
   print(o, "event=%_ data1=%_ data2=%_" % [event(e) data1(e) data2(e)])
   
defmethod print ( o : OutputStream, e : SDL-mouse-motion-event ) :
   println(o, "[type=%_ timestamp=%_ window-id=%_] " % [type(e) timestamp(e) window-id(e)] )
   print(o, "which=%_ state=%_ x=%_ y=%_ xrel=%_ yrel=%_"
      % [which(e) state(e) x(e) y(e) xrel(e) yrel(e)])

defmethod print ( o : OutputStream, e : SDL-mouse-button-event ) :
   println(o, "[type=%_ timestamp=%_ window-id=%_] " % [type(e) timestamp(e) window-id(e)] )
   print(o, "which=%_ button=%_ state=%_ clicks=%_ x=%_ y=%_"
      % [which(e) button(e) state(e) clicks(e) x(e) y(e)])

defmethod print ( o : OutputStream, e : SDL-keyboard-event ) :
   println(o, "[type=%_ timestamp=%_ window-id=%_] " % [type(e) timestamp(e) window-id(e)] )
   print(o, "state=%_ repeats=%_ scancode=%_ sym=%_ mod=%_"
      % [state(e) repeats(e) scancode(e) sym(e) mod(e)])

defmethod print ( o : OutputStream, e : SDL-multigesture-event ) :
   println(o, "[type=%_ timestamp=%_ device-id=%_]\ndTheta=%_ dDistance=%_ x=%_ y=%_ numFingers=%_]" % 
      [type(e) timestamp(e) device-id(e) dTheta(e) dDistance(e) x(e) y(e) numFingers(e)]
   )

public defn sdl-event-loop () -> Tuple<SDL-event>:
   call-SDL_Delay(100)
   val v = Vector<SDL-event>()
   label<False> break :
      while true :
         match(call-SDL_PollEvent()):
            (e : False) :
               break(false)
            (e : SDL_Event) :
               switch { type(e) == _ } :
                  SDL_WINDOWEVENT :
                     add(v, SDL-window-event(type(e) timestamp(e) window-id(e) event1(e) event2(e) event3(e)) )
                  SDL_MOUSEMOTION :
                     add(v, SDL-mouse-motion-event(type(e) timestamp(e) window-id(e) event1(e) event2(e) event3(e) event4(e) event5(e) event6(e)))
                  SDL_MOUSEBUTTONUP :
                     add(v, SDL-mouse-button-event(type(e) timestamp(e) window-id(e) event1(e) to-byte(event2(e)) to-byte(event2(e)>>8) to-byte(event2(e)>>16) event3(e) event4(e)))
                  SDL_MOUSEBUTTONDOWN :
                     add(v, SDL-mouse-button-event(type(e) timestamp(e) window-id(e) event1(e) to-byte(event2(e)) to-byte(event2(e)>>8) to-byte(event2(e)>>16) event3(e) event4(e)))
                  SDL_KEYUP :
                     add(v, SDL-keyboard-event(type(e) timestamp(e) window-id(e) to-byte(event1(e)) to-byte(event1(e)>>8) event2(e) event3(e) event4(e)))
                  SDL_KEYDOWN :
                     add(v, SDL-keyboard-event(type(e) timestamp(e) window-id(e) to-byte(event1(e)) to-byte(event1(e)>>8) event2(e) event3(e) event4(e)))
                  SDL_MULTIGESTURE :
                     add(v, SDL-multigesture-event(
                        type(e) timestamp(e) (to-long(window-id(e)) << 32L + to-long(event1(e))) 
                        getFloat(e 1) getFloat(e 2) getFloat(e 3) getFloat(e 4)
                        event11(e) ))
                  else : 
                     add(v, SDL-generic-event(type(e) timestamp(e) window-id(e) 
                        event1(e) event2(e) event3(e) event4(e) event5(e) event6(e) event7(e) event8(e) event9(e) event10(e) event11(e) ))
   to-tuple(v)
         
public defstruct sdl-surface :
   flags        : Int
   pPixelFormat : Long
   w : Int
   h : Int

; from SDL_blendmode.h
;typedef enum
;{
public val SDL_BLENDMODE_NONE = 0x00000000,   ;     /**< no blending
                                       ;       dstRGBA = srcRGBA */
public val SDL_BLENDMODE_BLEND = 0x00000001,  ;    /**< alpha blending
                                       ;       dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))
                                       ;       dstA = srcA + (dstA * (1-srcA)) */
public val SDL_BLENDMODE_ADD = 0x00000002,    ;     /**< additive blending
                                       ;       dstRGB = (srcRGB * srcA) + dstRGB
                                       ;       dstA = dstA */
public val SDL_BLENDMODE_MOD = 0x00000004,    ;      /**< color modulate
                                       ;       dstRGB = srcRGB * dstRGB
                                       ;       dstA = dstA */
public val SDL_BLENDMODE_MUL = 0x00000008,    ;     /**< color multiply
                                       ;       dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA))
                                       ;       dstA = (srcA * dstA) + (dstA * (1-srcA)) */
public val SDL_BLENDMODE_INVALID = 0x7FFFFFFF

   ;/* Additional custom blend modes can be returned by SDL_ComposeCustomBlendMode() */
;} SDL_BlendMode;
public defn sdl-set-surface-blend-mode (surface : Long mode : Int) -> Int :
   call-SDL_SetSurfaceBlendMode(surface mode)

public defn sdl-draw-text (surface : Long upper-left : [Int Int] text : String font : Long color : SDL-color ) -> False :
   val c : Int = to-int(r(color)) + (to-int(g(color)) << 8) + (to-int(b(color)) << 16) + (to-int(a(color)) << 24)
   val text-surface = call-TTF_RenderText_Blended(font text c)
   val [w h] = sdl-surface-size(text-surface)
   val rect = SDL_Rect(upper-left[0] upper-left[1] w h)
   call-SDL_BlitSurface(text-surface false surface rect)
   call-SDL_FreeSurface(text-surface)

public defn sdl-text-size (text : String font : Long color : SDL-color) -> [Int Int] :
   val c : Int = to-int(r(color)) + (to-int(g(color)) << 8) + (to-int(b(color)) << 16) + (to-int(a(color)) << 24)
   val text-surface = call-TTF_RenderText_Blended(font text c)
   val [w h] = sdl-surface-size(text-surface)
   call-SDL_FreeSurface(text-surface)
   [w h]


public defn test-sdl2 () :
   println("Calling SDL_Init()")
   println(call-SDL_version())
   val result = call-SDL_Init(SDL_INIT_VIDEO)
   println("Done calling SDL_Init(): %_" % [result])
   val p = call-SDL_CreateWindow("Labyrinth", 640, 480)
   println("SDL_CreateWindow: %_" % [p])
   val ws = call-SDL_GetWindowSurface(p)
   println("SDL_GetWindowSurface: %_" % [ws])
   val rect = SDL_Rect(50,50,50,50)
   val red = SDL_RGBA(255Y, 0Y, 0Y, 255Y)
   val fr = call-SDL_FillRect(ws, false, red)
   val green = SDL_RGBA(0Y, 255Y, 0Y, 255Y)
   call-SDL_FillRect(ws, rect, green)
   val up = call-SDL_UpdateWindowSurface(p)
   println("SDL_UpdateWindowSurface:%_ %_" % [fr up])
   val ii = call-IMG_Init(IMG_INIT_JPG|IMG_INIT_PNG)
   if ii :
      val img_surface = call-IMG_Load("vassalimages/LabyrinthSplash.jpg")
      println("IMG_Load:%_" %[img_surface])
      if img_surface != 0 :
         val opt_surface = call-SDL_ConvertSurface(img_surface, ws)
         println("SDL_ConvertSurface:%_" % [opt_surface])
         call-SDL_FreeSurface(img_surface)
         ; start blitting
         val opt-rect = SDL_Rect(100, 100, 400, 600)
         val bs = call-SDL_BlitSurface(opt_surface, false, ws, opt-rect )
         println("SDL_BlitSurface:%_" % [bs])
         call-SDL_UpdateWindowSurface(p)
         call-SDL_FreeSurface(opt_surface)
   
   label<False> break :
      while true :
         ; draw something
         do(
            fn (e) : 
               println(e)
               match(e):
                  (e : SDL-window-event) : call-SDL_UpdateWindowSurface(p)
                  (e : SDL-generic-event) : 
                     if type(e) == SDL_QUIT :
                        println("Quit")
                        break(false)
                  (e) : false
            sdl-event-loop()
         )
         
   call-SDL_FreeSurface(ws)
   call-SDL_DestroyWindow(p)
   call-IMG_Quit()
   call-SDL_Quit()

