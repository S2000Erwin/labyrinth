defpackage labyrinth :
   import core
   import collections
   import cards
   import GameBoardGraphics

; stub
; todo: use mprint later
defn gprint<?T> (s : ?T ) :
   println(s)

defn doLog (log : True|False) -> False :
   println("doLog %_" % [log])

defstruct Country :
   name  : String
   attrs : HashTable<String,?>

defn remove (country : Country|False, key : String ) -> True|False :
   match(country) :
      (c : Country) : remove(attrs(c), key)
      (f) : false

defn set (country : Country, k : String, v : ?) -> False :
   set(attrs(country), k, v)

defmethod print (o : OutputStream, country : Country ) :
   print("%_ : [" % [name(country)])
   for attr in attrs(country) do :
      val k = key(attr)
      val v = value(attr)
      print("  %_: %_" % [k, v] )
   println("  ]")

defn to-country (name : String, xs : Tuple<KeyValue<String,?>>) -> Country :
   val h = HashTable<String,?>()
   for x in xs do :
      h[key(x)] = value(x)
   val country = Country(name, h)
   country

defstruct Countries :
   c : HashTable<String,Country>

defn to-countries ( kvs : Tuple<KeyValue<String,?>> ) -> Countries :
   val t = Countries(HashTable<String,?>())
   for kv in kvs do :
      val name = key(kv)
      val country = to-country(name, value(kv))
      t[name] = country
   t

defn get (countries : Countries, name : String) -> Country|False :
   c(countries)[name]

defn set (countries : Countries, name : String, country : Country) -> False :
   set(c(countries), name, country)

defmethod print (o : OutputStream, countries : Countries ) :
   val country-hash = c(countries)
   for country in country-hash do :
      print(o, value(country) )

val baseRoutes = [
   ["syria", "iraq"], ["iraq", "saudiarabia"], ["saudiarabia", "yemen"],
   ["saudiarabia", "gulfstates"], ["gulfstates", "iran"], ["afghanistan", "pakistan"],
   ["iraq", "gulfstates"], ["gulfstates", "pakistan"], ["afghanistan", "iran"],
   ["afghanistan", "centralasia"], ["centralasia", "iran"], ["iran", "turkey"], 
   ["iraq", "iran"], ["iran", "pakistan"],
   ["syria", "turkey"], ["syria", "lebanon"], ["syria", "jordan"],
   ["turkey", "serbia"], ["turkey", "schengen"], ["turkey", "russia"], ["turkey", "iraq"],
   ["caucasus", "iran"], ["caucasus", "turkey"], ["caucasus", "centralasia"],
   ["caucasus", "russia"], ["centralasia", "china"], ["centralasia", "russia"],
   ["russia", "serbia"], ["russia", "schengen"], ["lebanon", "schengen"], ["lebanon", "israel"],
   ["jordan", "israel"], ["jordan", "iraq"], ["jordan", "saudiarabia"],
   ["israel", "egypt"], ["yemen", "somalia"],
   ["egypt", "libya"], ["egypt", "sudan"],
   ["libya", "sudan"], ["libya", "schengen"], ["libya", "algeria"],
   ["somalia", "kenya"], ["somalia", "sudan"],
   ["sudan", "kenya"], ["algeria", "schengen"], ["algeria", "morocco"],
   ["morocco", "schengen"], ["serbia", "schengen"], ["uk", "canada"], 
   ["uk", "schengen"], ["uk", "us"], ["canada", "schengen"], ["canada", "us"],
   ["us", "schengen"], ["us", "philippines"], ["philippines", "thailand"], ["philippines", "indonesia"],
   ["indonesia", "thailand"], ["indonesia", "india"], ["indonesia", "pakistan"],
   ["indea", "pakistan"], ["thailand", "china"]
]

; Don't reorder this table. It is according to Random Schengen Table
val schengens = ["scandinavia", "benelux", "germany", "france", "spain", "italy", "easterneurope"]

; Shia-mix Country table (9.5)
val shiamixTable_tuple = [ 
   3 => "syria", 4 => "syria", 5 => "syria", 6 => "syria",
   7 => "iran", 8 => "saudiarabia", 9 => "turkey", 10 => "iraq",
   11 => "gulfstates", 12 => "yemen", 13 => "pakistan", 14 => "lebanon",
   15 => "afghanistan", 16 => "afghanistan", 17 => "afghanistan", 18 => "afghanistan"
]
val shiamixTable = HashTable<Int, String>()
for s in shiamixTable_tuple do :
   shiamixTable[key(s)] = value(s)

val usmarkers = [ "advisors", "unscr1973", "nato", "maerskalabama" ]
val jihadistmarkers = ["scsc", "qataricrisis", "trainingcamps", "bloodythursday", "3cupsoftea", "censorshop" ]

val board_tuple = [
   "us" => ["name" => "us", "govern" => "good"]
   "canada" => [ "name" => "canada" "govern" => "good" ]
   "uk" => [ "name" => "uk" "govern" => "good" "recruit" => 3 ]
   "spain" => [ "name" => "spain" "govern" => "good" "schengen" => true "recruit" => 2 ]
   "france" => [ "name" => "france" "govern" => "good" "schengen" => true "recruit" => 2 ]
   "italy" => [ "name" => "italy" "govern" => "good" "schengen" => true ]
   "benelux" => ["name" => "benelux", "govern" => "good", "schengen" => true],
   "germany" => ["name" => "germany", "govern" => "good", "schengen" => true],
   "scandinavia"=> ["name"=> "scandinavia", "govern"=> "good", "schengen" => true],
   "easterneurope"=> ["name" => "easterneurope", "govern" => "good", "schengen" => true],
   "serbia" => ["name" => "serbia", "govern" => "good"],
   "russia" => ["name"=> "russia", "govern" => "fair"],
   "caucasus" => ["name" => "caucasus", "govern" => "fair"],
   "iran" => ["name" => "iran", "govern" => "fair"],
   "israel" => ["name" => "israel", "govern" => "good", "posture" => "hard", "permposture" => true],
   "india" => ["name" => "india", "govern" => "good"],
   "china" => ["name" => "china", "govern" => "fair"],
   "thailand" => ["name" => "thailand", "govern" => "fair"],
   "philippines"=> ["name" => "philippinse", "govern" => "fair", "recruit" => 3],
   "kenya" => ["name" => "kenya", "govern" => "fair", "african" => true],

   ; Muslim countries
   "indonesia" => ["name" => "indonesia", "muslim" => true, "resource" => 3, "oil" => true, "sunni" => true],
   "pakistan" => ["name" => "pakistan", "muslim" => true, "resource" => 2, "arsenal" => 3],
   "afghanistan" => ["name" => "afghanistan", "muslim" => true, "resource" => 1],
   "centralasia" => ["name" => "centralasia", "muslim" => true, "resource" => 2, "sunni" => true],
   "gulfstates" => ["name" => "gulfstates", "muslim" => true, "resource" => 3, "oil" => true],
   "yemen" => ["name" => "yemen", "muslim" => true, "resource" => 1],
   "iraq" => ["name" => "iraq", "muslim" => true, "resource" => 3, "oil" => true],
   "saudiarabia" => ["name" => "saudiarabia", "muslim" => true, "resource" => 3, "oil" => true],
   "somalia" => ["name" => "somalia", "muslim" => true, "resource" => 1, "sunni" => true, "african" => true],
   "syria" => ["name" => "syria", "muslim" => true, "resource" => 2, "sunni" => true],
   
   "jordan" => ["name" => "jordan", "muslim" => true, "resource" => 1, "sunni" => true],
   "turkey" => ["name" => "turkey", "muslim" => true, "resource" => 2],
   "lebanon" => ["name" => "lebanon", "muslim" => true, "resource" => 1],
   "egypt" => ["name" => "egypt", "muslim" => true, "resource" => 3, "sunni" => true],
   "sudan" => ["name" => "sudan", "muslim" => true, "resource" => 1, "oil" => true, "sunni" => true, "african" => true],
   "libya" => ["name" => "libya", "muslim" => true, "resource" => 1, "oil" => true, "sunni" => true, "african" => true],
   "algeria" => ["name" => "algeria", "muslim" => true, "resource" => 2, "oil" => true, "sunni" => true, "african" => true],
   "morocco" => ["name" => "morocco", "muslim" => true, "resource" => 2, "sunni" => true, "african" => true]
]


val awakenBoard_tuple = [
   "mali" => ["name" => "mali" "muslim" => true "resource" => 1, "sunni" => true "african" => true ]
   "nigeria" => [ "name" => "algeria" "govern" => "poor" "african" => true ]
   "syria" => [ "name" => "syria" "muslim" => true "resource" => 2 "arsenal" => 2 ]
   "iran" => ["name" => "iran" "arsenal" => 1]
]

val ISILHMBoard_tuple = [
   "nigeria" => [ "name" => "nigeria" "muslim" => true "resource" => 2 "sunni" => true "african" => true ]
]

val random_muslim_country = [
      ["morocco", "syria", "-"],
      ["algeria", "jordan", "indonesia"],
      ["libya", "turkey", "lebanon"],
      ["egypt", "saudiarabia", "iraq"],
      ["sudan", "gulfstates", "afghanistan"],
      ["somalia", "yemen", "pakistan"]
   ]
val random_muslim_country2 = ["centralasia", "centralasia", "iraq", "mali", "nigeria", "nigeria"]

val personalities = [110, 111, 112, 115, 116, 215, 216, 219, 225, 237, 328, 329, 338, 342, 352]

val ISILHMSetup_tuple = [
   "syria" => [
      "name" => "syria",
      "align" => "neutral",
      "govern" => "fair",
      "caliphate" => "capital",
      "civilwar" => true,
      "militia" => 3,
      "activecell" => 5
   ],
   "iraq" => [
      "name" => "iraq",
      "align" => "neutral",
      "govern" => "poor",
      "caliphate" => "country",
      "civilwar" => true,
      "militia" => 3,
      "activecell" => 4
   ],
   "yemen" => [
      "name" => "yemen",
      "align" => "neutral",
      "govern" => "poor",
      "civilwar" => true,
      "militia" => 2,
      "sleepercell" => 2
   ],
   "gulfstates"=> [
      "name" => "gulfstates",
      "align" => "ally",
      "govern" => "fair",
      "troop" => 2
   ],
   "afghanistan" => [
      "name" => "afghanistan",
      "align" => "ally",
      "govern" => "poor",
      "troop" => 2,
      "sleepercell" => 1
   ],
   "nigeria"=> [
      "name" => "nigeria",
      "muslim" => true,
      "sunni" => true,
      "align" => "neutral",
      "govern" => "poor",
      "resource" => 2,
      "sleepercell" => 1,
      "african" => true
   ],
   "uk" => [
      "name" => "uk",
      "posture" => "hard"
   ]
]

val awakenRoutes = [
   ["mali", "morocco"], ["mali", "algeria"], ["mali", "nigeria"], ["nigeria", "sudan"], ["nigeria", "kenya"]
]

val surge-decks = [ 
   [
      1, 10, 12, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 28, 29, 
      30, 32, 33, 35, 36, 40, 42, 45, 46, 49, 50, 52, 53, 60, 63, 
      68, 70, 72, 73, 74, 77, 78, 79, 81, 82, 83, 89, 90, 91, 93, 
      95, 97, 100, 101, 103, 105, 106, 107, 108, 111, 112, 113, 118, 119, 120
   ], [
      123, 124, 127, 128, 130, 131, 134, 135, 136, 139, 140, 141, 143, 146, 148,
      153, 154, 160, 161, 162, 163, 164, 168, 170, 172, 175, 176, 177, 179, 185,
      186, 190, 191, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208,
      210, 211, 212, 213, 214, 219, 220, 221, 223, 227, 228, 229, 230, 237, 239
   ] 
]

public defstruct Labyrinth :
   awakening : True|False with : (setter => set-awakening)
   foreverwar : True|False with : (setter => set-foreverwar)
   scenario : String
   usplayer : String
   jihadistplayer : String
   board : Countries with : (setter => set-board)
   countries : Countries with : (setter => set-countries)
   routes : Vector<[String,String]> with : (setter => set-routes)
   deck : Tuple<Int> with : (setter => set-deck)
   abort : True|False with : (setter => set-abort)
   reshuffled : True|False with : (setter => set-reshuffled)
   currentplayer : String with : (setter => set-currentplayer)
   currentphase : Int with : (setter => set-currentphase)
   firstPlot : True|False with : (setter => set-firstPlot)
   firstPlotCard : Int with : (setter => set-firstPlotCard)
   heldCard : True|False with : (setter => set-heldCard)
   lapsing : Vector<Int>
   plots : Vector<Int|String>
   usedPlots : Vector<Int|String>
   spentUnits : Vector<String>
   cellcamps : Int with : (setter => set-cellcamps)
   maxcamps : Int with : (setter => set-maxcamps)
   lesscell : Int with : (setter => set-lesscell)
   plotSuccess : True|False with : (setter => set-plotSuccess)
   plotAvailables : Vector<Int> 
   nbDeck : Int with : (setter => set-nbDeck)
   turn : Int with : (setter => set-turn)
   trooptrack : Int with : (setter => set-trooptrack)
   offmap : Int with : (setter => set-offmap)
   funding : Int with : (setter => set-funding)
   celltrack : Int with : (setter => set-celltrack)
   prestige : Int with : (setter => set-prestige)
   markers : Vector<String>
   loadedDeck :  Vector<Int>
   winMethod : String with : (setter => set-winMethod)
   currentphaseCountries : Vector<String>
   lastphaseCountries : Vector<String>
   discard : Vector<Int>
   removed : Vector<Int>
   ushand : Vector<Int>
   jihadisthand : Vector<Int>
   eventNotUsed : Vector<Int>
   eventUsed : Vector<Int>
   eventAsEvent : Vector<Int>
   usreserve : Int with : (setter => set-usreserve)
   jihadistreserve : Int with : (setter => set-jihadistreserve)
   gameend : True|False with : (setter => set-gameend)
   reason : String with : (setter => set-reason)
   currentcard : Int with : (setter => set-currentcard)
   gameBoard : GameBoardGraphics|False with : (setter => set-gameBoard)
   decks : Tuple<Tuple<Int>>|False with : (setter => set-decks)

defmethod print (o : OutputStream, lab : Labyrinth) :
   println(o, decks(lab))
   println(o, deck(lab))
   println(o, countries(lab))
   println(o, routes(lab))
   println(o, scenario(lab))

defn doLog (lab : Labyrinth, log : Int) -> False :
   if log >= 1 :
      doLog(true)
   else :
      doLog(false)


public defn make-labyrinth (  awakening : True|False, foreverwar : True|False, scenario : String, 
                              usplayer : String, jihadistplayer : String, 
                              _terminal: True|False, log: Int ) -> Labyrinth :
   val lab = Labyrinth( awakening, 
                        foreverwar,
                        scenario,
                        usplayer,
                        jihadistplayer,
                        to-countries(board_tuple), 
                        Countries(HashTable<String,?>()),
                        Vector<[String,String]>(),
                        [], 
                        false,
                        false,      ; reshuffled
                        "jihadist"
                        0
                        false
                        0
                        false
                        Vector<Int>()
                        Vector<Int|String>()
                        Vector<Int|String>()
                        Vector<String>()
                        0
                        0
                        0
                        false
                        to-vector<Int>([1, 1, 1, 2, 2, 3])
                        3
                        1
                        15
                        0
                        7
                        15
                        6
                        Vector<String>()
                        Vector<Int>()        ; loadedDeck
                        ""
                        Vector<String>()
                        Vector<String>()
                        Vector<Int>()
                        Vector<Int>()
                        Vector<Int>()
                        Vector<Int>()
                        Vector<Int>()
                        Vector<Int>()
                        Vector<Int>()
                        0
                        0
                        false
                        ""
                        0
                        false          ; gameBoardGraphics
                        false          ; decks
                     )
   doLog(lab, log)   
   set-gameBoard(lab, make-GameBoardGraphics(lab))
   ; var comm = make-Communicator(lab, usplayer, jihadistplayer, terminal, log)
   reset(lab)
   lab


; to-do : complete reset
defn reset (lab : Labyrinth) :
   println("Reset Game")
   if scenario(lab) == "Surge":
      set-awakening(lab, false)
   set-countries(lab, board(lab))
   set-routes(lab, to-vector<[String,String]>(baseRoutes))
   if awakening(lab) :
      for c in awakenBoard_tuple do :
         val cs = countries(lab) 
         val k = key(c) as String
         val v = value(c)
         cs[k] = to-country(k, v)
      val cs = countries(lab)
      val syria = cs["syria"]
      match(syria) : ( (syria : Country) : remove(syria, "sunni") )
      for route in awakenRoutes do :
         val result = find( fn ( x : [String,String], y : [String,String] ) -> True|False : (
                              if ( x[0] == y[0] and x[1] == y[1] ) or ( x[0] == y[1] and x[1] == y[0] ) :
                                 true
                              else :
                                 false )
                              routes(lab)
                              [route] )
         match(result) : ((result:False) : add(routes(lab), route) )
   if scenario(lab) == "ISILHM":
      val cs = countries(lab)
      for c in ISILHMBoard_tuple do :
         cs[key(c)] = to-country(key(c), value(c))
      for kv in ISILHMSetup_tuple do :
         val name = key(kv)
         val attrs = value(kv)
         for attr in attrs do:
            match( cs[name] ) :
               (c : Country) : set(c, key(attr), value(attr))
      remove(cs["iran"], "arsenal")
      remove(cs["syria"], "arsenal")
         
   ; gprint("scenario=%_" % [scenario(lab)])
   ; loadedDeck is for testing only
   clear(loadedDeck(lab))
   ; add(loadedDeck(lab), [195])
   clear(currentphaseCountries(lab))
   clear(lastphaseCountries(lab))
   clear(discard(lab))
   clear(removed(lab))
   clear(ushand(lab))
   clear(jihadisthand(lab))
   clear(eventNotUsed(lab))
   add-all(eventNotUsed(lab), deck(lab))
   clear(eventNotUsed(lab))
   clear(eventUsed(lab))
   clear(eventAsEvent(lab))
   set-usreserve(lab, 0)
   set-jihadistreserve(lab, 0)
   set-gameend(lab, false)
   set-reason(lab, "")
   clear(lapsing(lab))
   clear(plots(lab))
   clear(usedPlots(lab))
   clear(spentUnits(lab))
   set-cellcamps(lab, 0)
   set-maxcamps(lab, 0)
   set-lesscell(lab, 0)
   set-plotSuccess(lab, false)
   clear(plotAvailables(lab))
   add-all(plotAvailables(lab), to-vector<Int>([1, 1, 1, 2, 2, 3]))
   set-nbDeck(lab, 3)
   set-turn(lab, 1)
   clear(markers(lab))
   set-offmap(lab, 0)

   if scenario(lab) == "Surge":
      set-awakening(lab, false)
      set-foreverwar(lab, false)
      set-nbDeck(lab, 1)
      set-prestige(lab, 4)
      setPosture(lab, "us", "hard")
      set-trooptrack(lab, 5)
      set-funding(lab, 6)
      set-celltrack(lab, 15)
      setGovern(lab, "libya", "poor")
      setAlign(lab, "libya", "adversary")
      setGovern(lab, "syria", "fair")
      setAlign(lab, "syria", "adversary")
      addOneCell(lab, "syria", "recruit", true)
      setGovern(lab, "iraq", "poor")
      setAlign(lab, "iraq", "ally")
      setTroop(lab, "iraq", 5)
      addOneCell(lab, "iraq", "recruit", true)
      addOneCell(lab, "iraq", "recruit", true)
      addOneCell(lab, "iraq", "recruit", true)
      setRegimeChange(lab, "iraq", "tan")
      setMarker(lab, "iraq", "sadr", true)
      setMarker(lab, "iraq", "alanbar", true)
      addOneCell(lab, "iran", "recruit", true)
      setGovern(lab, "saudiarabia", "poor")
      setAlign(lab, "saudiarabia", "ally")
      addOneCell(lab, "saudiarabia", "recruit", true)
      setGovern(lab, "gulfstates", "fair")
      setAlign(lab, "gulfstates", "ally")
      setTroop(lab, "gulfstates", 2)
      setGovern(lab, "pakistan", "fair")
      setAlign(lab, "pakistan", "ally")
      addOneCell(lab, "pakistan", "recruit", true)
      setMarker(lab, "pakistan", "fata", true)
      setGovern(lab, "afghanistan", "poor")
      setAlign(lab, "afghanistan", "ally")
      setTroop(lab, "afghanistan", 3)
      for i in 0 to 2 do :
         addOneCell(lab, "afghanistan", "recruit", true)
      addOneAid(lab, "afghanistan", false)
      setRegimeChange(lab, "afghanistan", "tan")
      setMarker(lab, "afghanistan", "nato", 1)
      setGovern(lab, "somalia", "poor")
      setAlign(lab, "somalia", "neutral")
      addOneCell(lab, "somalia", "recruit", true)
      setBesiegedRegime(lab, "somalia")
      setGovern(lab, "indonesia", "fair")
      setAlign(lab, "indonesia", "neutral")
      addOneCell(lab, "indonesia", "recruit", true)
      setPosture(lab, "uk", "hard")
      setPosture(lab, "scandinavia", "soft")
      set-decks(lab, surge-decks)   

   print(lab)
   print(cards)
   val gcard = get?(cards, 10)
   if gcard is-not False :
      println(gcard)
   println("End Reset Game")

defn setAttr (lab: Labyrinth, name: String, attr: String, value: String|Int|True|False) -> True|False :
   val country = countries(lab)[name]
   match(country) :
      (country : Country) : 
         val attrs = attrs(country)
         match(value):
            (f:False) : remove(attrs, attr)
            (v:Int) :
               if v == 0:
                  remove(attrs, attr)
               else :
                  attrs[attr] = value
            (value) : attrs[attr] = value
         addCountryToCurrentPhase(lab, name)
         gprint(country)
         true
      (country) : false

defn getAttr (lab: Labyrinth, name : String, attr: String) -> String|Int|True|False :
   val country = countries(lab)[name]
   match(country):
      (country : Country) :
         val value = get?(attrs(country), attr)
         match(value):
            (value : False): false
            (value) : value
      (f) : false

defn setPosture (lab : Labyrinth, name: String, posture : String) :
   if setAttr(lab, name, "posture", posture) :
      gprint("%_ is %_. World=%_" % [name, getPosture(lab, name), getGWOTHard(lab)])
         

defn setGovern (lab : Labyrinth, name: String, govern : String) :
   setAttr(lab, name, "govern", govern)

defn setAlign (lab : Labyrinth, name: String, align : String) :
   setAttr(lab, name, "align", align)
   if align == "adversary":
      removeAllAdvisors(lab, name)

defn addOneCell (lab: Labyrinth, name : String, reason : String, event: True|False ) :
   ; check Cell Track
   var result = ""
   label<False> break :
      if reason == "recruit":
         if cellAvailable(lab, event) <= 0 :
            break
      if isCaliphate(lab, name):
         val cell = getActiveCell(lab, name, false) + 1
         setActiveCell(lab, name, cell)
         gprint("one active cell is added in %_ to %_" % [name cell])
         result = "activecell"
      else:
         val cell = getSleeperCell(lab, name, false) + 1
         setSleeperCell(lab, name, cell)
         gprint("one sleeper cell is added in %_ to %_" % [name cell])
         result = "sleepercell"
      if reason != "travelto":
         removeCadre(lab, name)
      if reason == "recruit":
         if celltrack(lab) > 0:
            val cell = celltrack(lab) - 1
            set-celltrack(lab, cell)
         else:
            val cell = cellcamps(lab) - 1
            set-cellcamps(lab, cell)
      gprint(countries(lab)[name])
      testCountry(lab, name)
      addCountryToCurrentPhase(lab, name)
   result

defn setTroop (lab : Labyrinth, name : String, troop : Int) :
   label<False> break :
      if name == "track" :
         set-trooptrack(lab, troop)
         break

      val country = countries(lab)[name]
      match(country):
         (country : Country) :
            if troop == 0:
               remove(attrs(country), "troop")
            else:
               setAttr(lab, name, "troop", troop)
               removeAllAdvisors(lab, name)
            addCountryToCurrentPhase(lab, name)

defn setRegimeChange (lab : Labyrinth, name : String, color : String) :
   if setAttr(lab, name, "regimechange", color) :
      if color == "green" :
         connectCaliphate(lab, name)
      
defn setMarker (lab : Labyrinth, name : String, marker : String, value : String|True|Int) :
   if name == "markers" :
      add(markers(lab), marker)
   else :
      setAttr(lab, name, marker, value)

defn addOneAid (lab : Labyrinth, name : String, event: True|False) :
   label<False> break :
      var aid = getAid(lab, name)
      if aid >= 1 and event == false:
         break
      aid = aid + 1
      setAttr(lab, name, "aid", aid)
      gprint("Aid=%_ in %_" % [aid name])

defn setBesiegedRegime (lab : Labyrinth, name : String) :
   setAttr(lab, name, "besiegedregime", true)

defn addCountryToCurrentPhase (lab : Labyrinth, name : String) :
   val cpc = currentphaseCountries(lab)
   val f = find(fn (x : String) : x == name, cpc)
   if f is False :
      add(cpc, name)

defn getPosture (lab : Labyrinth, name : String):
   val posture = getAttr(lab, name, "posture")
   match(posture) :
      (posture : String) : posture
      (f) : "untested"

defn getGWOTHard (lab : Labyrinth) :
   ; count hard as 1 and soft as -1
   var gwot = 0
   for country in c(countries(lab)) do:
      val name = key(country)
      if not (name == "us" or isMuslim(lab, name) or name == "iran"):
         val posture = getPosture(lab, name)
         if posture == "hard":
               gwot = gwot + 1
         else if posture == "soft":
               gwot = gwot - 1
   if gwot > 3:
      gwot = 3
   if gwot < (- 3):
      gwot = (- 3)
   gwot

defn removeAllAdvisors (lab : Labyrinth, name : String) :
   if setAttr(lab, name, "advisors", false) :
      gprint("Remove All Advisors in %_" % [name])

defn cellAvailable (lab : Labyrinth, event: True|False) :
   var result = 0
   label<False> break:
      if event:
         result = celltrack(lab) + cellcamps(lab)
         break
      var buildable = 0
      if funding(lab) <= 3:
         buildable = celltrack(lab) - 10
      else if funding(lab) <= 6:
         buildable = celltrack(lab) - 5
      else if funding(lab) <= 8:
         buildable = celltrack(lab)
      else if funding(lab) == 9:
         buildable = celltrack(lab) + cellcamps(lab)
      result = buildable
   result

defn isCaliphate (lab : Labyrinth, name : String) -> True|False:
   val ic = getAttr(lab, name, "caliphate")
   match(ic):
      (ic:True) : ic
      (ic) : false
   

defn getActiveCell (lab : Labyrinth, name : String, withMarkers: True|False) :
   var cell = 0
   val ac = getAttr(lab, name, "activecell")
   match(ac):
      (ac : Int) : cell = cell + ac
   if withMarkers:
      match( getAttr(lab, name, "sadr") ):
         (t : True) : cell = cell + 1
   cell

defn setActiveCell (lab : Labyrinth, name : String, cell : Int) :
   setAttr(lab, name, "activecell", cell)
   
defn getSleeperCell (lab : Labyrinth, name : String, withMarkers : True|False) -> Int:
   val sc = getAttr(lab, name, "sleepercell")
   match(sc):
      (sc:Int) : sc
      (f) : 0
      

defn setSleeperCell (lab : Labyrinth, name : String, cell : Int) :
   setAttr(lab, name, "sleepercell", cell)

defn removeCadre (lab : Labyrinth, name : String) :
   if setAttr(lab, name, "cadre", false) :
      gprint("Cadre removed in %_" % [name])

defn testCountry (lab : Labyrinth, name : String) -> False :
   label<False> break:
      if not isUntested(lab, name):
         break
      if isMuslim(lab, name):
         rollGovern(lab, name)
         setAlign(lab, name, "neutral")
         gprint("%_ is a %_ %_" % [name getAlign(lab,name) getGovern(lab,name)])
      else:
         if name == "iran":
               break
         rollPosture(lab, name, 0)

defn getAlign (lab : Labyrinth, name : String) -> String :
   val a = getAttr(lab, name, "align")
   match(a):
      (a : String) : a
      (a) : "untested"

defn getGovern (lab : Labyrinth, name : String) -> String :
   val g = getAttr(lab, name, "govern")
   match(g):
      (g: String) : g
      (g) : ""

defn isMuslim (lab : Labyrinth, name : String) -> True|False :
   val im = getAttr(lab, name, "muslim")
   match(im) :
      (im:True) : true
      (im) : false
      
defn isUntested (lab : Labyrinth, name : String) -> True|False:
   if isMuslim(lab, name):
      if getGovern(lab, name) == "":
            true
      else:
            false
   else:
      if getPosture(lab, name) == "untested":
            true
      else:
            false

defn getAid (lab : Labyrinth, name : String) :
   val a = getAttr(lab, name, "aid")
   match(a):
      (a : Int) : a
      (a) : 0

defn rollGovern (lab : Labyrinth, name : String) :
   val die = rollOnce(lab)
   if die <= 4:
      setGovern(lab, name, "poor")
   else:
      setGovern(lab, name, "fair")
   gprint("Country %_ is %_" % [name getGovern(lab,name)])

defn rollPosture (lab : Labyrinth, name : String, drm:Int) :
   gprint("Roll Posture for %_" % [name])
   var die = rollOnce(lab) + drm
   if name == "us":
      die = die + 1
   if die <= 4:
      gprint("soft")
      setPosture(lab, name, "soft")
   else:
      gprint("hard")
      setPosture(lab, name, "hard")

defn rollOnce (lab : Labyrinth) :
   val dice = rand(6) + 1
   gprint("Rolled: %_" % [dice])
   dice

; todo: cater for Caliphate later
defn connectCaliphate (lab : Labyrinth, name : String) :
   false
   
