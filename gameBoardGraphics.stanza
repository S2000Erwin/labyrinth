defpackage GameBoardGraphics :
    import core
    import collections
    import sdl2
    import labyrinth

; some enum
val scale-step = 0.25f

val upperleft = [
    "us" => [12 118] "uk" => [92 102] "canada" => [58 38]
    "spain" => [86 258] "france" => [134 190] "benelux" => [172 118]
    "scandinavia" => [246 34] "italy" => [212 226] "germany" => [240 126] "easterneurope" => [306 102]
    "serbia" => [294 188] "russia" => [400 72] "caucasus" => [436 166] "china" => [730 272] "thailand" => [816 420]
    "israel" => [342 338]
    "india" => [674 358] "philippines" => [932 468] "kenya" => [422 606]
    "iran" => [534 260]
    "morocco" => [66 338] "algeria" => [162 332] "libya" => [236 350] "egypt" => [318 404] "sudan" => [354 486]
    "somalia" => [466 496]
    "turkey" => [358 178] "lebanon" => [350 256] "syria" => [418 252] "iraq" => [466 324] "jordan" => [402 340]
    "saudiarabia" => [466 408] "yemen" => [538 432] "gulfstates" => [530 342] "centralasia" => [578 164]
    "afghanistan" => [602 252] "pakistan" => [598 334] "indonesia" => [846 516]
    "mali" => [84 562] "nigeria" => [180 570]
]

public defstruct GameBoardGraphics :
    board-window : Window
    cards-window : Window 
    focused-window-id : Int with : (setter => set-focused-window-id)
    font : Long
    baseBoard : Long
    cardsInBox : Int with : (setter => set-cardsInBox)
    middle : Int with : (setter => set-middle)
    left : Int with : (setter => set-left)
    right : Int with : (setter => set-right)
    ; stock images
    syria : Long
    iranMuslim : Long
    mali : Long
    nigeria_nonMuslim : Long
    nigeria_muslim : Long
    troop : Long
    troopLevel : Long
    troopoffmap : Long
    funding : Long
    activeCell : Long
    sleeperCell : Long
    censorship : Long 
    smartphones : Long
    maerskAlabama : Long 
    pirates : Long
    plot1 : Long
    plot2 : Long
    plot3 : Long
    plotW : Long 
    usreserve : Long
    jihadistreserve : Long
    phase : Long
    deck : Long
    pic : Long
    fgc : Long
    gr : Long
    ir : Long
    usHard : Long
    usSoft : Long        
    gwotHard : Long
    gwotSoft : Long
    prestige : Long
    firstPlot : Long
    lapsing : Long
    hard : Long
    soft : Long    
    good : Long
    fair : Long
    poor : Long
    islamrule : Long
    militia : Long
    cadre : Long
    caliphateCapital : Long
    caliphateCountry : Long
    civilWar : Long
    tanRegimeChange : Long
    greenRegimeChange : Long
    aid : Long
    besiegedRegime : Long
    awaken : Long
    react : Long
    nato : Long
    advisors : Long
    UNSCR1973 : Long
    scsc : Long
    trainingcamps : Long
    qataricrisis : Long
    truce : Long
    bloodyThursday : Long
    threeCupsOfTea : Long
    anbarAwakening : Long
    benazirBhutto : Long
    indoPakistaniTalks : Long
    bhuttoShot : Long
    alanbar : Long
    sadr : Long
    fata : Long

defstruct Window :
    size : [Int Int] with : (setter => set-size)
    window : Long
    win-surface : Long with : (setter => set-win-surface)
    scalar : Float with : (setter => set-scalar)
    scale : Tuple<Float> with : (setter => set-scale)
    center : Tuple<Float> with : (setter => set-center)
    canvas : Long

public defn make-GameBoardGraphics () -> GameBoardGraphics :    
    sdl-init()
    val width = 1024
    val height = 768
    val default-scale = 4.0f
    val [window win-surface] = sdl-create-window("Labyrinth", width, height)
    val cards-width = 252 * 10
    val cards-height = 353
    val [cards-window cards-surface] = sdl-create-window("Cards" cards-width cards-height)

    val screen-aspect = to-float(width) / to-float(height)
    val game-board = sdl-load-image( "vassalimages/Labyrinth Map 2016.jpg", win-surface)    ; baseBoard
    val canvas = sdl-create-surface(sdl-surface-size(game-board))
    val [board-w board-h] = sdl-surface-size(game-board)
    val board-aspect = to-float(board-w) / to-float(board-h)
    val adjustment = screen-aspect / board-aspect

    val cards-canvas = sdl-create-surface([cards-width cards-height])
    val [cards-w cards-h] = sdl-surface-size(cards-canvas)
    val cards-aspect = to-float(cards-w) / to-float(cards-h)
    val cards-adjustment = cards-aspect / cards-aspect

    val gbg = GameBoardGraphics( 
        Window( [width, height] window win-surface default-scale [1.0f adjustment] [0.5f 0.5f] canvas )
        Window( [cards-width cards-height] cards-window cards-surface 1.0f [1.0f cards-adjustment] [0.5f 0.5f] cards-canvas) 
        0   ; focused-window-id
        sdl-open-font("arial.ttf" 30)
        game-board
        0   ; cardsInBox
        0   ; middle
        0   ; left
        0   ; right
        ; stock images
        sdl-load-image("vassalimages/MapTiles_Syria.jpg" canvas)
        sdl-load-image("vassalimages/MapTiles_Iran(Muslim).jpg" canvas)
        sdl-load-image("vassalimages/MapTiles_Mali.jpg" canvas)
        sdl-load-image("vassalimages/MapTiles_Nigeria(non-Muslim).jpg" canvas)
        sdl-load-image("vassalimages/MapTiles_Nigeria(Muslim).jpg" canvas)
        sdl-load-image("vassalimages/Troops.png" canvas)
        sdl-load-image("vassalimages/TroopsLevel.png" canvas)
        sdl-load-image("vassalimages/MapTiles_Off Map Box.png" canvas)        
        sdl-load-image("vassalimages/Jihadist Funding.png" canvas)
        sdl-load-image("vassalimages/Cells (Active).png" canvas)
        sdl-load-image("vassalimages/Cells.png" canvas)   
        sdl-load-image("vassalimages/Awakening_Event_Censorship.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_Smart Phones.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_Maresk Alabama.png" canvas)
        sdl-load-image("vassalimages/Event_Pirates.png" canvas)             
        sdl-load-image("vassalimages/TerrorPlot_1.png" canvas)
        sdl-load-image("vassalimages/TerrorPlot_2.png" canvas)
        sdl-load-image("vassalimages/TerrorPlot_3.png" canvas)
        sdl-load-image("vassalimages/TerrorPlot_WMD.png" canvas)
        sdl-load-image("vassalimages/Reserves_US.png" canvas)
        sdl-load-image("vassalimages/Reserves_Jihadists.png" canvas)
        sdl-load-image("vassalimages/Card.png" canvas)
        sdl-load-image("vassalimages/Deck.png" canvas)        
        sdl-load-image("vassalimages/Poor-Islamist.png" canvas)
        sdl-load-image("vassalimages/Fair-Good.png" canvas)
        sdl-load-image("vassalimages/Resources_Good.png" canvas)
        sdl-load-image("vassalimages/Resources_Jihadists.png" canvas)
        sdl-load-image("vassalimages/US Hard.png" canvas)
        sdl-load-image("vassalimages/US Soft.png" canvas)
        sdl-load-image("vassalimages/World Hard.png" canvas)
        sdl-load-image("vassalimages/World Soft.png" canvas)    
        sdl-load-image("vassalimages/US Prestige.png" canvas)
        sdl-load-image("vassalimages/1stPlot.png" canvas)
        sdl-load-image("vassalimages/Awakening_Lapsing.png" canvas)
        sdl-load-image("vassalimages/Hard.png" canvas)
        sdl-load-image("vassalimages/Soft.png" canvas)
        sdl-load-image("vassalimages/Governance_Good.png" canvas)
        sdl-load-image("vassalimages/Governance_Fair.png" canvas)
        sdl-load-image("vassalimages/Governance_Poor.png" canvas)
        sdl-load-image("vassalimages/Governance_Islamist.png" canvas)
        sdl-load-image("vassalimages/Militia.png" canvas)
        sdl-load-image("vassalimages/Cadre.png" canvas)
        sdl-load-image("vassalimages/Awakening_Caliphate Capital.png" canvas)
        sdl-load-image("vassalimages/Awakening_Caliphate Country.png" canvas)
        sdl-load-image("vassalimages/Awakening_Civil War.png" canvas)
        sdl-load-image("vassalimages/RegimeChange.png" canvas)
        sdl-load-image("vassalimages/RegimeChange(green).png" canvas)
        sdl-load-image("vassalimages/Aid.png" canvas)
        sdl-load-image("vassalimages/BesiegedRegime.png" canvas)
        sdl-load-image("vassalimages/Awakening_Awakening.png" canvas)
        sdl-load-image("vassalimages/Awakening_AwakeningReaction.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_NATO.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_Advisors.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_UNSCR 1973.png" canvas)
        sdl-load-image("vassalimages/Laby3_Event_SCSC.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_Training Camps.png" canvas)
        sdl-load-image("vassalimages/Laby3_Event_QatariCrisis.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_Truce.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_Bloody Thursday.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_3 Cups of Tea.png" canvas)
        sdl-load-image("vassalimages/Event_AnbarAwakening.png" canvas)
        sdl-load-image("vassalimages/Event_BenazirBhutto.png" canvas)
        sdl-load-image("vassalimages/Event_Indo-PakTalks.png" canvas)
        sdl-load-image("vassalimages/Event_Bhutto Shot.png" canvas)
        sdl-load-image("vassalimages/Event_Anbar.png" canvas)
        sdl-load-image("vassalimages/Event_Sadr.png" canvas)
        sdl-load-image("vassalimages/Event_FATA.png" canvas)
    )
    ; test-sdl2()
    build-board(gbg)
    show(gbg)
    gbg

defn get-window-id (win : Window) -> Int :
    sdl-get-window-id(window(win))

defn recalculate (win : Window) :
    val ws = sdl-get-window-surface(window(win))
    val size = sdl-surface-size(ws)
    set-size(win size)
    set-win-surface(win ws)

    val screen-aspect = to-float(size[0]) / to-float(size[1])
    val [board-w board-h] = sdl-surface-size(canvas(win))
    val board-aspect = to-float(board-w) / to-float(board-h)
    val adjustment = screen-aspect / board-aspect
    set-scale(win [1.0f adjustment])
    move-center(win 0 0)

defn recalculate (gbg : GameBoardGraphics  w-id : Int) :
    do(
        fn (win) :
            if get-window-id(win) == w-id :
                recalculate(win)
        [board-window(gbg) cards-window(gbg)]
    )

defn overlay (win : Window src-surface : Long top-left : [Int Int]) :
    val [w h] = sdl-surface-size(src-surface)
    val rect = SDL-rect(top-left[0] top-left[1] w h)
    sdl-set-surface-blend-mode(src-surface SDL_BLENDMODE_BLEND)
    sdl-overlay(src-surface false canvas(win) rect)

defn build-board (gbg : GameBoardGraphics) :
    sdl-set-surface-blend-mode(baseBoard(gbg) SDL_BLENDMODE_BLEND)
    sdl-overlay(baseBoard(gbg) false canvas(board-window(gbg)) false)
    sdl-draw-text(canvas(board-window(gbg)) [0 0] "Digital Adaption by Erwin Lau" font(gbg) 0xffffffff)

public defn build-board (gbg : GameBoardGraphics, lab : Labyrinth) :
    build-board(gbg)
    set-cardsInBox(gbg 0)
    val win = board-window(gbg)
    if isMuslim(lab "iran") :
        overlay(win iranMuslim(gbg) [1780, 826])
    if not isSunni(lab "syria"):
        overlay(win syria(gbg) [1393, 800])
    if get(countries(lab) "mali") is-not False :
        overlay(win mali(gbg) [267, 1787])
    if get(countries(lab) "nigeria") is-not False :
        if isMuslim(lab "nigeria") :
            overlay(win nigeria_muslim(gbg), [567, 1787])
        else:
            overlay(win nigeria_nonMuslim(gbg), [567, 1787])
    do(
        {drawCountry(gbg lab key(_))}
        c(countries(lab))
    )
    drawTroopTrack(gbg lab)
    drawCellTrack(gbg lab)
    drawMarkers(gbg lab)
    drawAvailablePlots(gbg lab)
    drawReserves(gbg lab)
    drawPhase(gbg lab)
    drawUsedPlots(gbg lab)
    drawDeck(gbg lab)
    drawScores(gbg lab)
    drawGWOT(gbg lab)
    drawPrestige(gbg lab)
    drawFirstPlot(gbg lab)
    drawLapsing(gbg lab)

public defn build-cards (gbg : GameBoardGraphics, lab : Labyrinth) :
    val win = cards-window(gbg)
    sdl-clear-surface(win-surface(win))
    do(
        {drawCard(gbg _ cards-window(gbg) [_ * 252 0])}
        ushand(lab) when currentplayer(lab) == "us" else jihadisthand(lab)
        0 to false
    )

public defn show (gbg : GameBoardGraphics lab : Labyrinth) :
    show(gbg)

public defn show (gbg : GameBoardGraphics) :
    show(board-window(gbg))
    show(cards-window(gbg))

defn show (gbg : GameBoardGraphics  w-id : Int) :
    do(
        fn (win) :
            if get-window-id(win) == w-id :
                show(win)
        [board-window(gbg) cards-window(gbg)]
    )

defn show (win : Window) :
    val size = sdl-surface-size(canvas(win))
    val scaled-size = map({to-float(_) / _ / scalar(win) } to-list(size) scale(win))
    val cs = map({to-int(_ * to-float(_))} to-list $ center(win) size)
    
    val src-rect = SDL-rect( 
        to-int(to-float(cs[0]) - scaled-size[0] * 0.5f)
        to-int(to-float(cs[1]) - scaled-size[1] * 0.5f)
        to-int(scaled-size[0])
        to-int(scaled-size[1])
    )
    sdl-clear-surface(win-surface(win))
    sdl-overlay(canvas(win), src-rect, win-surface(win), false)
    sdl-update(window(win))

defn move-center (win : Window x : Int y : Int) :
    val size = sdl-surface-size(win-surface(win))
    val new-center = map( 
        {_ + _}
        map(
            {_ / to-float(_) / _ / scalar(win)} 
            to-list([to-float((- x)) to-float((- y))])
            to-tuple(size)
            scale(win)
        )
        center(win) 
    )
    val final-center =
        map(
            fn (c s) : max((0.5f / s / scalar(win)) min(c (1.0f - 0.5f / s / scalar(win))))
            new-center
            scale(win)
        ) when scalar(win) > 1.0f else
        map(
            {max(0.0f min(_ 1.0f))}
            new-center
        )
    set-center(win, to-tuple(final-center))

defn move-center (gbg : GameBoardGraphics  window-id : Int x : Int y : Int) :
    do(
        fn (win) :
            if get-window-id(win) == window-id :
                move-center(win x y)
        [board-window(gbg) cards-window(gbg)]
    )


defn change-scale ( win : Window change : Float ) :
    val new-scalar = scalar(win) + change
    if new-scalar >= 0.5f :
        set-scalar(win new-scalar)
        move-center(win 0 0)
        show(win)

defn change-scale (gbg : GameBoardGraphics w-id : Int change : Float) :
    do(
        fn (win) :
            if get-window-id(win) == w-id :
                change-scale(win change)
        [board-window(gbg) cards-window(gbg)]
    )

public defn handle-events (gbg : GameBoardGraphics) -> Tuple<Char>|True|False :
    val char-buffer = Vector<Char>()
    label<Tuple<Char>|True|False> return :
        do( fn (e) :
                println(e)
                match(e) :
                    (e : SDL-window-event) : 
                        ; println("window event %_" % [e])
                        if event(e) == SDL_WINDOWEVENT_SIZE_CHANGED :
                            val width = data1(e)
                            val height = data2(e)
                            val w-id = window-id(e)
                            println("window:%_ resized %_ %_" % [w width height] )
                            recalculate(gbg w-id)
                            show(gbg w-id)
                        else if event(e) == SDL_WINDOWEVENT_EXPOSED :
                            val w-id = window-id(e)
                            recalculate(gbg w-id)
                            show(gbg w-id)
                        else if event(e) == SDL_WINDOWEVENT_FOCUS_GAINED :
                            set-focused-window-id(gbg window-id(e))

                    (e : SDL-multigesture-event) :
                        val d = dDistance(e) * 125.0f
                        if abs(d) >= 0.1f :
                            change-scale(gbg focused-window-id(gbg) d)

                    (e : SDL-generic-event) : 
                        return(true) when SDL_QUIT == type(e)
                        
                    (e : SDL-mouse-motion-event) :
                        if (state(e) & 1) == 1 :
                            ; println("drag: %_" % [e])
                            move-center(gbg window-id(e) xrel(e) yrel(e))
                            show(gbg window-id(e))
                    (e : SDL-keyboard-event) :
                        if state(e) == 0Y and mod(e) == 0 :
                            val c = to-char(sym(e))
                            if c == ',' :
                                change-scale(gbg focused-window-id(gbg) (- scale-step))
                            else if c == '.' :
                                change-scale(gbg focused-window-id(gbg) scale-step)
                            else :
                                add(char-buffer, c)
                    (e) : false 
            sdl-event-loop()
        )  
        to-tuple(char-buffer)

defn drawTroopTrack (gbg : GameBoardGraphics lab : Labyrinth) :
    val coord = [3167 153]
    for i in 0 to trooptrack(lab) do:
        val x = (coord[0] - 40 * i) - (i / 5) * 72
        overlay(board-window(gbg) troop(gbg) [x, coord[1]])
    val troop-level = getTroopLevel(lab)
    val x = 2447 when troop-level == "low" else 2727 when troop-level == "war" else 2993
    overlay(board-window(gbg) troopLevel(gbg) [x, coord[1] - 13])
    val offmap = offmap(lab)
    if offmap != 0:
        overlay(board-window(gbg) troopoffmap(gbg) [3000 273])
        val coord = [3100 293]
        val x = coord[0] - (offmap / 2) * 40
        val y = coord[1]
        for i in 0 to offmap do:
            overlay(board-window(gbg) troop(gbg) [(x + 40 * i) y])

defn drawCellTrack (gbg : GameBoardGraphics lab : Labyrinth) :
    overlay(board-window(gbg) funding(gbg) [(102 * (funding(lab) - 1) + 2280) 413])
    val coord = [3113 533]
    for i in 0 to celltrack(lab) do :
        val x = (coord[0] - i * 50) - (i / 5) * 67
        overlay(board-window(gbg) sleeperCell(gbg) [x, coord[1]])
    if cellcamps(lab) > 0:
        pasteCylinder(gbg sleeperCell(gbg) cellcamps(lab) [3193 407])

defn drawMarkers (gbg : GameBoardGraphics lab : Labyrinth) :
    val coord = [2867 673]
    val markerTable = [ 
        "censorship" => censorship(gbg)
        "smartphones" => smartphones(gbg)
        "maerskalabama" => maerskAlabama(gbg)
        "pirates" => pirates(gbg)
    ]
    do(
        {overlay(board-window(gbg) lookup(markerTable _) [(coord[0] + _ * 67) coord[1]])}
        markers(lab)
        0 to length(markers(lab))
    )

defn drawUsedPlots (gbg :GameBoardGraphics lab : Labyrinth) :
    drawPlots(gbg usedPlots(lab) [2100 53])

defn drawAvailablePlots (gbg : GameBoardGraphics lab : Labyrinth) :
    drawPlots(gbg plotAvailables(lab) [2867 807])

defn drawPlots (gbg : GameBoardGraphics plots : Vector<Int|String> coord : [Int Int]) :
    do(
        fn (plot i) :
            val row = i / 6
            val col = i % 6
            val x = coord[0] + col * 73
            val y = coord[1] + row * 73
            val p = switch {plot == _} :
                1 : plot1(gbg)
                -1 : plot1(gbg)
                2 : plot2(gbg)
                -2 : plot2(gbg)
                3 : plot3(gbg)
                -3 : plot3(gbg)
                "w" : plotW(gbg)
                "-w" : plotW(gbg)
                else : plot1(gbg)
            overlay(board-window(gbg) p [x, y])
        plots
        0 to length(plots)
    )


defn drawReserves (gbg : GameBoardGraphics lab : Labyrinth) :
    overlay(board-window(gbg) usreserve(gbg) [2648 (848 - usreserve(lab) * 87)])
    overlay(board-window(gbg) jihadistreserve(gbg) [2726 (848 - jihadistreserve(lab) * 87)])

defn drawPhase (gbg : GameBoardGraphics lab : Labyrinth) :
    val x = 1653 + (214 when currentplayer(lab) == "us" else 0) + (107 when currentphase(lab) == 1 else 0)
    val y = 153
    overlay(board-window(gbg) phase(gbg) [x y])

defn drawDeck (gbg : GameBoardGraphics lab : Labyrinth) :
    val x = 1960 + (3 - nbDeck(lab)) * 100 + (333 when nbDeck(lab) == 0 else 0)
    val y = 273
    overlay(board-window(gbg) deck(gbg) [x y])

defn drawScores (gbg : GameBoardGraphics lab : Labyrinth) :
    val scores = Vector<Vector<Long>>()
    do(
        {add(scores Vector<Long>())}
        0 to 16
    )
    drawScore(getPIC(lab) pic(gbg) scores)
    drawScore(getFGC(lab) fgc(gbg) scores)
    drawScore(getGoodResource(lab) gr(gbg) scores)
    drawScore(getIslamResource(lab) ir(gbg) scores)
    showScores(gbg scores)

defn drawScore (score : Int marker : Long scores : Vector<Vector<Long>>):
    if 0 <= score and score <= 15 :
        add(scores[score] marker)

defn showScores (gbg : GameBoardGraphics scores : Vector<Vector<Long>>):
    val coord = [1893, 1773]
    val interval = 87
    do(
        fn (score) :
            val markers = scores[score]
            val num = length(markers)
            if num > 0:
                val row = 1 when score >= 7 else 0
                val col = (score - 6) when score >= 7 else score
                val x = coord[0] + interval * col
                val y = coord[1] - (num - 1) * 33 + row * interval
                do(
                    fn (i) : overlay(board-window(gbg) markers[i] [x  (y + i * 67)])
                    0 to num
                )
        0 to 16
    )

defn drawGWOT (gbg : GameBoardGraphics lab : Labyrinth) :
    val us = getPosture(lab "us")
    val gwot = getGWOTHard(lab)
    val marker = gwotHard(gbg) when gwot > 0 else gwotSoft(gbg) when gwot < 0 else gwotHard(gbg) when us == "hard" else gwotSoft(gbg)
    val interval = 83
    val coord = [100 1367]
    overlay(board-window(gbg) marker [(coord[0] + (gwot + 3) * interval) coord[1]])
    if us == "hard":
        overlay(board-window(gbg) usHard(gbg) [420, 1440])
    else:
        overlay(board-window(gbg) usSoft(gbg) [280, 1440])

defn drawPrestige (gbg : GameBoardGraphics lab : Labyrinth) :
    val coord = [73 1573]
    val interval = 83
    overlay(board-window(gbg) prestige(gbg) [(coord[0] + interval * (prestige(lab) - 1)) coord[1] ])

defn drawFirstPlot (gbg : GameBoardGraphics lab : Labyrinth) :
    label<False> return :
        if not firstPlot(lab) :
            return(false)
        val card = firstPlotCard(lab)
        if card == 0:
            return(false)
        drawCardInBox(gbg card firstPlot(gbg))

defn drawLapsing (gbg : GameBoardGraphics lab : Labyrinth) :
    do(
        {drawCardInBox(gbg _ lapsing(gbg))}
        lapsing(lab)
    )

defn drawCardInBox (gbg : GameBoardGraphics card : Int marker : Long) :
    val cardBox = [827 1767]
    val x = cardBox[0] + cardsInBox(gbg) * 167
    val y = cardBox[1] + cardsInBox(gbg) * 33
    drawCard(gbg card board-window(gbg) [x y])
    overlay(board-window(gbg) marker [(x + 100) (y + 167)])
    set-cardsInBox(gbg (cardsInBox(gbg) + 1))

defn drawCard (gbg : GameBoardGraphics card : Int win : Window r : [Int Int]) :
    val filename = append-all(["vassalimages/Card" "_0" when card < 10 else "_" to-string(card) ".png"]) when card < 241 else
        append-all(["vassalimages/" to-string(card) ".png"])
    val image = sdl-load-image(filename canvas $ win)
    overlay(win image r)
    sdl-free-surface(image)


defn drawCountry (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    set-middle(gbg 0)
    set-left(gbg 0)
    set-right(gbg 0)
    if isMuslim(lab name):
        pasteGovern(gbg lab name)
        pasteCaliphate(gbg lab name)
        pasteCivilWar(gbg lab name)
        pasteRegimeChange(gbg lab name)
        pasteAid(gbg lab name)
        pasteBesiegedRegime(gbg lab name)
        pasteAwaken(gbg lab name)
        pasteReact(gbg lab name)
    else:
        if name != "us" and name !="iran":
            pastePosture(gbg lab name)
    pastePlot(gbg lab name)
    pasteMarkers(gbg lab name)
    pasteArsenal(gbg lab name)
    pasteTroop(gbg lab name)
    pasteMilitia(gbg lab name)
    pasteCell(gbg lab name)
    pasteCadre(gbg lab name)

defn get-upperleft (name : String) -> [Int Int]|False :
    match(lookup?(upperleft name)) :
        (rs : [Int Int]) : 
            map({_ * 10 / 3} rs) as [Int Int]
        (f) : false
    
defn pasteArsenal (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        ([ox oy] : [Int Int]) : 
            val [x y] = [ox (oy + 233)] when name == "pakistan" else [(ox + 53) (oy - 100)]
            do(
                {overlay(board-window(gbg) plotW(gbg) [(x + _ * 70), y])}
                0 to getArsenal(lab name)
            )
        (f) : false

defn pastePosture (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    if name != "us" and name != "israel" and name != "iran" :
        match(get-upperleft(name)) :
            (r : [Int Int]) :
                val posture = getPosture(lab name)
                match(hard(gbg) when posture == "hard" else soft(gbg) when posture == "soft" else false) :
                    (image : Long) : overlay(board-window(gbg) image r)
                    (f) : false
            (f) : false

defn pasteGovern (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :
            if not isUntested(lab name) :
                val align = getAlign(lab name)
                val x = (r[0] + 67) when align == "neutral" else (r[0] + 134) when align == "adversary" else r[0]
                val y = r[1]
                val govern = getGovern(lab name)
                val image = switch {govern == _} :
                    "good" : good(gbg)
                    "fair" : fair(gbg)
                    "poor" : poor(gbg)
                    "islamrule" : islamrule(gbg)
                    else : false
                match(image) :
                    (image : Long) : overlay(board-window(gbg) image [x y])
                    (f) : false

defn pasteCaliphate (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :        
            val x = r[0] + 67
            val y = r[1] + 67 * (middle(gbg) + 1)
            if isCaliphateCapital(lab name) :
                overlay(board-window(gbg) caliphateCapital(gbg) [x y])
                set-middle(gbg middle(gbg) + 1)
            else if isCaliphate(lab name) :
                overlay(board-window(gbg) caliphateCountry(gbg) [x y])
                set-middle(gbg middle(gbg) + 1)
        (f) : false

defn pasteCivilWar (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :        
            val x = r[0] + 67
            val y = r[1] + 67 * (middle(gbg) + 1)
            if isCivilWar(lab name) :
                overlay(board-window(gbg) civilWar(gbg) [x y])
                set-middle(gbg middle(gbg) + 1)
        (f) : false

defn pasteRegimeChange (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :        
            val x = r[0] + 67
            val y = r[1] + 67 * (middle(gbg) + 1)
            val image = greenRegimeChange(gbg) when isGreenRegimeChange(lab name) 
                else tanRegimeChange(gbg) when isTanRegimeChange(lab name) else false
            match(image) :
                (image : Long) :
                    overlay(board-window(gbg) image [x y])
                    set-middle(gbg middle(gbg) + 1)
                (f) : false
        (f) : false

defn pasteAid (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :        
            val x = r[0] + 67
            val y = r[1] + 67 * (middle(gbg) + 1)
            do(
                { overlay(board-window(gbg) aid(gbg) [x _ * 67 + y]) set-middle(gbg middle(gbg) + 1) }
                0 to getAid(lab name)
            )
        (f) : false

defn pasteBesiegedRegime (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :        
            val x = r[0] + 67
            val y = r[1] + 67 * (middle(gbg) + 1)
            if isBesiegedRegime(lab name) :
                overlay(board-window(gbg) besiegedRegime(gbg) [x y])
                set-middle(gbg middle(gbg) + 1)
        (f) : false

defn pasteCylinder (gbg : GameBoardGraphics image : Long number : Int [x y] : [Int Int]) :
    do(
        fn (i) :
            val row = i / 2
            val col = i % 2
            val local_x = x + col * 33 - (17 when row % 2 == 1 else 0)
            val local_y = y + row * 33
            overlay(board-window(gbg) image [local_x local_y])
        0 to number
    )

defn pasteMilitia (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :
            val x = r[0]
            val y = r[1] + 67 * (left(gbg) + 1)
            val nb-militia = getMilitia(lab name)
            pasteCylinder(gbg militia(gbg) nb-militia [x y])
            set-left(gbg (left(gbg) + (nb-militia + 3) / 4))
        (f) : false

defn pasteCadre (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :
            val x = r[0] + 134
            val y = r[1] + 67 * (right(gbg) + 1 when isMuslim(lab name) else 0)
            if isCadre(lab name) :
                overlay(board-window(gbg) cadre(gbg) [x y])
                set-right(gbg right(gbg) + 1)
        (f) : false

defn pasteTroop (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :
            val x = r[0]
            val y = r[1] + 67 * (left(gbg) + 1)
            val nb-troop = getTroop(lab name)
            pasteCylinder(gbg troop(gbg) nb-troop [x y])
            set-left(gbg (left(gbg) + (nb-troop + 3) / 4))
        (f) : false

defn pasteCell (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :
            val x = r[0] + 134
            val y = r[1] + 67 * (right(gbg) + 1 when isMuslim(lab name) else 0)
            val nb-activeCell = getActiveCell(lab name false)
            pasteCylinder(gbg activeCell(gbg) nb-activeCell [x y])
            set-right(gbg (right(gbg) + (nb-activeCell + 3) / 4))
            val sc-y = y + ((nb-activeCell + 3) / 4) * 67
            val nb-sleeperCell = getSleeperCell(lab name false)
            pasteCylinder(gbg sleeperCell(gbg) nb-sleeperCell [x sc-y])
            set-right(gbg right(gbg) + (nb-sleeperCell + 3) / 4)
        (f) : false

defn pasteAwaken (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :
            val x = r[0]
            val y = r[1] + 134
            val nb-awaken = getAwaken(lab name)
            if nb-awaken > 0 :
                overlay(board-window(gbg) awaken(gbg) [x y])
                sdl-draw-text(canvas $ board-window $ gbg [x + 38 y + 25] to-string(nb-awaken) font(gbg) 0x00ffffff)
        (f) : false

defn pasteReact (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :
            val x = r[0] + 134
            val y = r[1] + 134
            val nb-react = getReact(lab name)
            if nb-react > 0 :
                overlay(board-window(gbg) react(gbg) [x y])
                sdl-draw-text(canvas $ board-window $ gbg [x + 38 y + 25] to-string(nb-react) font(gbg) 0x00ffffff)
                ;ImageDraw.Draw(self.board).text((x+10, y+6), str(nb-react), (255, 255, 255))
        (f) : false

defn pastePlot (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        (r : [Int Int]) :
            val x = r[0] + 67
            val y = r[1] + 67 * (middle(gbg) + 1 when isMuslim(lab name) else 0)
            do(
                fn ( [pname p] inc-y ) :
                    if pname == name :    
                        ; println(pname, p)
                        val plot : String|Int = "w" when p is String else abs(p as Int)
                        val image = switch {plot == _} :
                            1    : plot1(gbg)
                            2    : plot2(gbg)
                            3    : plot3(gbg)
                            "w"  : plotW(gbg)
                            else : false
                        match(image) :
                            (image : Long) : overlay(board-window(gbg) image [x y + 67 * inc-y])
                            (f) : false
                        set-middle(gbg middle(gbg) + 1)
                plots(lab)
                0 to length(plots(lab))
            )
        (f) : false

defn getCoord (gbg : GameBoardGraphics lab : Labyrinth name : String pos : String) -> [Int Int] :
    match(get-upperleft(name)) :
        (r : [Int Int]) :
            val x = r[0] + 67 when pos == "middle" else 134 when pos == "right" else 0
            val y = r[1] + (67 * (middle(gbg) + 1 when isMuslim(lab name) else 0)) when pos == "middle" else
                           (67 * (right(gbg) + 1 when isMuslim(lab name) else 0)) when pos == "right" else
                           (67 * (left(gbg) + 1))
            [x y]
        (f) : [0 0]

defn pasteMarkers (gbg : GameBoardGraphics lab : Labyrinth name : String) -> False :
    do( {overlay(board-window(gbg) nato(gbg) getCoord(gbg lab name "left")) set-left(gbg left(gbg) + 1)}
        0 to getNATO(lab name)
    )
    do( {overlay(board-window(gbg) advisors(gbg) getCoord(gbg lab name "middle")) set-middle(gbg middle(gbg) + 1)}
        0 to getAdvisors(lab name)
    )
    if isUNSCR1973(lab name) :
        overlay(board-window(gbg) UNSCR1973(gbg) getCoord(gbg lab name "middle"))
        set-middle(gbg middle(gbg) + 1)

    val markerTable = [ 
        "scsc" => scsc(gbg)
        "qataricrisis" => qataricrisis(gbg) "trainingcamps" => trainingcamps(gbg)
        "truce" => truce(gbg) "bloodyThursday" => bloodyThursday(gbg)
        "3cupsoftea" => threeCupsOfTea(gbg) "anbarawakening" => anbarAwakening(gbg)
        "benazirbhutto" => benazirBhutto(gbg) "indopakistanitalks" => indoPakistaniTalks(gbg) 
        "bhuttoshot" => bhuttoShot(gbg) "alanbar" => alanbar(gbg)
        "sadr" => sadr(gbg) "fata" => fata(gbg)
    ]
    do( 
        fn (item) :
            val marker = key(item)
            val image = value(item) 
            if isMarker(lab name marker) :
                if marker == "sadr":
                    overlay(board-window(gbg) image getCoord(gbg lab name "right"))
                    set-right(gbg right(gbg) + 1)
                else :
                    overlay(board-window(gbg) image getCoord(gbg lab name "middle"))
                    set-middle(gbg middle(gbg) + 1)
        markerTable
    )
