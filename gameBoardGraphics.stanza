defpackage GameBoardGraphics :
    import core
    import collections
    import sdl2
    import labyrinth

; some enum
val scale-step = 0.25f


val upperleft = [
    "us" => [12 118] "uk" => [92 102] "canada" => [58 38]
    "spain" => [86 258] "france" => [134 190] "benelux" => [172 118]
    "scandinavia" => [246 34] "italy" => [212 226] "germany" => [240 126] "easterneurope" => [306 102]
    "serbia" => [294 188] "russia" => [400 72] "caucasus" => [436 166] "china" => [730 272] "thailand" => [816 420]
    "israel" => [342 338]
    "india" => [674 358] "philippines" => [932 468] "kenya" => [422 606]
    "iran" => [534 260]
    "morocco" => [66 338] "algeria" => [162 332] "libya" => [236 350] "egypt" => [318 404] "sudan" => [354 486]
    "somalia" => [466 496]
    "turkey" => [358 178] "lebanon" => [350 256] "syria" => [418 252] "iraq" => [466 324] "jordan" => [402 340]
    "saudiarabia" => [466 408] "yemen" => [538 432] "gulfstates" => [530 342] "centralasia" => [578 164]
    "afghanistan" => [602 252] "pakistan" => [598 334] "indonesia" => [846 516]
    "mali" => [84 562] "nigeria" => [180 570]
]

public defstruct GameBoardGraphics :
    size : [Int, Int] with : (setter => set-size)
    window : Long
    win-surface : Long with : (setter => set-win-surface)
    baseBoard : Long
    board : Long
    scalar : Float with : (setter => set-scalar)           ; nominal scale
    scale : Tuple<Float> with : (setter => set-scale)     ; use normalized scale. 1.0 = full source screen, 2.0 quarter source screen zoomed in
    center : Tuple<Float> with : (setter => set-center)   ; use nomralized x, y coordinates. 1.0 = right/bottom, 0.0 = left/top
    cardsInBox : Int with : (setter => set-cardsInBox)
    middle : Int with : (setter => set-middle)
    left : Int with : (setter => set-left)
    right : Int with : (setter => set-right)
    ; stock images
    syria : Long
    iranMuslim : Long
    mali : Long
    nigeria_nonMuslim : Long
    nigeria_muslim : Long
    troop : Long
    troopLevel : Long
    troopoffmap : Long
    funding : Long
    activeCell : Long
    sleeperCell : Long
    censorship : Long 
    smartphones : Long
    maerskAlabama : Long 
    pirates : Long
    plot1 : Long
    plot2 : Long
    plot3 : Long
    plotW : Long 
    usreserve : Long
    jihadistreserve : Long
    phase : Long
    deck : Long
    pic : Long
    fgc : Long
    gr : Long
    ir : Long
    usHard : Long
    usSoft : Long        
    gwotHard : Long
    gwotSoft : Long
    prestige : Long
    firstPlot : Long
    lapsing : Long
    hard : Long
    soft : Long    

public defn make-GameBoardGraphics () -> GameBoardGraphics :
    val width = 1024
    val height = 768
    val default-scale = 4.0f
    val [window win-surface] = sdl-create-window("Labyrinth", width, height)

    val screen-aspect = to-float(width) / to-float(height)
    val game-board = sdl-load-image( "vassalimages/Labyrinth Map 2016.jpg", win-surface)    ; baseBoard
    val canvas = sdl-create-surface(sdl-surface-size(game-board))
    val [board-w board-h] = sdl-surface-size(game-board)
    val board-aspect = to-float(board-w) / to-float(board-h)
    val adjustment = screen-aspect / board-aspect

    val gbg = GameBoardGraphics( 
        [width, height]
        window
        win-surface
        game-board
        canvas
        default-scale
        [1.0f adjustment]
        [0.5f 0.5f] 
        0   ; cardsInBox
        0   ; middle
        0   ; left
        0   ; right
        ; stock images
        sdl-load-image("vassalimages/MapTiles_Syria.jpg" canvas)
        sdl-load-image("vassalimages/MapTiles_Iran(Muslim).jpg" canvas)
        sdl-load-image("vassalimages/MapTiles_Mali.jpg" canvas)
        sdl-load-image("vassalimages/MapTiles_Nigeria(non-Muslim).jpg" canvas)
        sdl-load-image("vassalimages/MapTiles_Nigeria(Muslim).jpg" canvas)
        sdl-load-image("vassalimages/Troops.png" canvas)
        sdl-load-image("vassalimages/TroopsLevel.png" canvas)
        sdl-load-image("vassalimages/MapTiles_Off Map Box.png" canvas)        
        sdl-load-image("vassalimages/Jihadist Funding.png" canvas)
        sdl-load-image("vassalimages/Cells (Active).png" canvas)
        sdl-load-image("vassalimages/Cells.png" canvas)   
        sdl-load-image("vassalimages/Awakening_Event_Censorship.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_Smart Phones.png" canvas)
        sdl-load-image("vassalimages/Awakening_Event_Maresk Alabama.png" canvas)
        sdl-load-image("vassalimages/Event_Pirates.png" canvas)             
        sdl-load-image("vassalimages/TerrorPlot_1.png" canvas)
        sdl-load-image("vassalimages/TerrorPlot_2.png" canvas)
        sdl-load-image("vassalimages/TerrorPlot_3.png" canvas)
        sdl-load-image("vassalimages/TerrorPlot_WMD.png" canvas)
        sdl-load-image("vassalimages/Reserves_US.png" canvas)
        sdl-load-image("vassalimages/Reserves_Jihadists.png" canvas)
        sdl-load-image("vassalimages/Card.png" canvas)
        sdl-load-image("vassalimages/Deck.png" canvas)        
        sdl-load-image("vassalimages/Poor-Islamist.png" canvas)
        sdl-load-image("vassalimages/Fair-Good.png" canvas)
        sdl-load-image("vassalimages/Resources_Good.png" canvas)
        sdl-load-image("vassalimages/Resources_Jihadists.png" canvas)
        sdl-load-image("vassalimages/US Hard.png" canvas)
        sdl-load-image("vassalimages/US Soft.png" canvas)
        sdl-load-image("vassalimages/World Hard.png" canvas)
        sdl-load-image("vassalimages/World Soft.png" canvas)    
        sdl-load-image("vassalimages/US Prestige.png" canvas)
        sdl-load-image("vassalimages/1stPlot.png" canvas)
        sdl-load-image("vassalimages/Awakening_Lapsing.png" canvas)
        sdl-load-image("vassalimages/Hard.png" canvas)
        sdl-load-image("vassalimages/Soft.png" canvas)
    )
    ; test-sdl2()
    build-board(gbg)
    show(gbg)
    gbg

defn recalculate (gbg : GameBoardGraphics) :
    val ws = sdl-get-window-surface(window(gbg))
    val size = sdl-surface-size(ws)
    set-size(gbg, size)
    set-win-surface(gbg, ws)

    val screen-aspect = to-float(size[0]) / to-float(size[1])
    val [board-w board-h] = sdl-surface-size(baseBoard(gbg))
    val board-aspect = to-float(board-w) / to-float(board-h)
    val adjustment = screen-aspect / board-aspect
    set-scale(gbg [1.0f adjustment])
    move-center(gbg, 0, 0)

defn overlay (gbg : GameBoardGraphics src-surface : Long top-left : [Int Int]) :
    val [w h] = sdl-surface-size(src-surface)
    val rect = SDL-rect(top-left[0] top-left[1] w h)
    sdl-set-surface-blend-mode(src-surface SDL_BLENDMODE_BLEND)
    sdl-overlay(src-surface false board(gbg) rect)

defn build-board (gbg : GameBoardGraphics) :
    sdl-set-surface-blend-mode(baseBoard(gbg) SDL_BLENDMODE_BLEND)
    sdl-overlay(baseBoard(gbg) false board(gbg) false)

public defn build-board (gbg : GameBoardGraphics, lab : Labyrinth) :
    build-board(gbg)
    set-cardsInBox(gbg 0)
    if isMuslim(lab "iran") :
        overlay(gbg iranMuslim(gbg) [1780, 826])
    if not isSunni(lab "syria"):
        overlay(gbg syria(gbg) [1393, 800])
    if get(countries(lab) "mali") is-not False :
        overlay(gbg mali(gbg) [267, 1787])
    if get(countries(lab) "nigeria") is-not False :
        if isMuslim(lab "nigeria") :
            overlay(gbg nigeria_muslim(gbg), [567, 1787])
        else:
            overlay(gbg nigeria_nonMuslim(gbg), [567, 1787])
    do(
        {drawCountry(gbg lab key(_))}
        c(countries(lab))
    )
    drawTroopTrack(gbg lab)
    drawCellTrack(gbg lab)
    drawMarkers(gbg lab)
    drawAvailablePlots(gbg lab)
    drawReserves(gbg lab)
    drawPhase(gbg lab)
    drawUsedPlots(gbg lab)
    drawDeck(gbg lab)
    drawScores(gbg lab)
    drawGWOT(gbg lab)
    drawPrestige(gbg lab)
    drawFirstPlot(gbg lab)
    drawLapsing(gbg lab)

public defn show (gbg : GameBoardGraphics lab : Labyrinth) :
    show(gbg)

public defn show (gbg : GameBoardGraphics) :
    val size = sdl-surface-size(baseBoard(gbg))
    val scaled-size = map({to-float(_) / _ / scalar(gbg) } to-list(size) scale(gbg))
    val cs = map({to-int(_ * to-float(_))} to-list $ center(gbg) size)
    
    val src-rect = SDL-rect( 
        to-int(to-float(cs[0]) - scaled-size[0] * 0.5f)
        to-int(to-float(cs[1]) - scaled-size[1] * 0.5f)
        to-int(scaled-size[0])
        to-int(scaled-size[1])
    )
    sdl-clear-surface(win-surface(gbg))
    sdl-overlay(board(gbg), src-rect, win-surface(gbg), false)
    sdl-update(window(gbg))

defn move-center (gbg : GameBoardGraphics, x : Int, y : Int) :
    val size = sdl-surface-size(win-surface(gbg))
    val new-center = map( 
        {_ + _}
        map(
            {_ / to-float(_) / _ / scalar(gbg)} 
            to-list([to-float((- x)) to-float((- y))])
            to-tuple(size)
            scale(gbg)
        )
        center(gbg) 
    )
    val final-center =
        map(
            fn (c s) : max((0.5f / s / scalar(gbg)) min(c (1.0f - 0.5f / s / scalar(gbg))))
            new-center
            scale(gbg)
        ) when scalar(gbg) > 1.0f else
        map(
            {max(0.0f min(_ 1.0f))}
            new-center
        )
    set-center(gbg, to-tuple(final-center))

defn change-scale ( gbg : GameBoardGraphics, change : Float ) :
    val new-scalar = scalar(gbg) + change
    if new-scalar >= 0.5f :
        set-scalar(gbg new-scalar)
        move-center(gbg 0 0)
        show(gbg)

public defn handle-events (gbg : GameBoardGraphics) -> Tuple<Char>|True|False :
    val char-buffer = Vector<Char>()
    label<Tuple<Char>|True|False> return :
        do( fn (e) :
                ;println(e)
                match(e) :
                    (e : SDL-window-event) : 
                        ; println("window event %_" % [e])
                        if event(e) == SDL_WINDOWEVENT_SIZE_CHANGED :
                            val width = data1(e)
                            val height = data2(e)
                            ; println("resized %_ %_" % [width height] )
                            recalculate(gbg)
                            show(gbg)
                        else if event(e) == SDL_WINDOWEVENT_EXPOSED :
                            recalculate(gbg)
                            show(gbg)
                    (e : SDL-multigesture-event) :
                        val d = dDistance(e) * 125.0f
                        if abs(d) >= 0.1f :
                            change-scale(gbg d)

                    (e : SDL-generic-event) : 
                        return(true) when SDL_QUIT == type(e)
                        
                    (e : SDL-mouse-motion-event) :
                        if (state(e) & 1) == 1 :
                            ; println("drag: %_" % [e])
                            move-center(gbg, xrel(e), yrel(e))
                            show(gbg)
                    (e : SDL-keyboard-event) :
                        if state(e) == 0Y and mod(e) == 0 :
                            val c = to-char(sym(e))
                            if c == ',' :
                                change-scale(gbg (- scale-step))
                            else if c == '.' :
                                change-scale(gbg scale-step)
                            else :
                                add(char-buffer, c)
                    (e) : false 
            sdl-event-loop()
        )  
        to-tuple(char-buffer)

defn drawTroopTrack (gbg : GameBoardGraphics lab : Labyrinth) :
    val coord = [3167 153]
    for i in 0 to trooptrack(lab) do:
        val x = (coord[0] - 40 * i) - (i / 5) * 72
        overlay(gbg troop(gbg) [x, coord[1]])
    val troop-level = getTroopLevel(lab)
    val x = 2447 when troop-level == "low" else 2727 when troop-level == "war" else 2993
    overlay(gbg troopLevel(gbg) [x, coord[1] - 13])
    val offmap = offmap(lab)
    if offmap != 0:
        overlay(gbg troopoffmap(gbg) [3000 273])
        val coord = [3100 293]
        val x = coord[0] - (offmap / 2) * 40
        val y = coord[1]
        for i in 0 to offmap do:
            overlay(gbg troop(gbg) [(x + 40 * i) y])

defn drawCellTrack (gbg : GameBoardGraphics lab : Labyrinth) :
    overlay(gbg funding(gbg) [(102 * (funding(lab) - 1) + 2280) 413])
    val coord = [3113 533]
    for i in 0 to celltrack(lab) do :
        val x = (coord[0] - i * 50) - (i / 5) * 67
        overlay(gbg sleeperCell(gbg) [x, coord[1]])
    if cellcamps(lab) > 0:
        pasteCylinder(gbg sleeperCell(gbg) cellcamps(lab) [3193 407])

defn pasteCylinder (gbg image number [x, y]):
    for i in 0 to number do :
        val row = i / 2
        val col = i % 2
        val local_x = x + col * 33 - (17 when row % 2 == 1 else 0)
        val local_y = y + row * 33
        overlay(gbg image [local_x, local_y])

defn drawMarkers (gbg : GameBoardGraphics lab : Labyrinth) :
    val coord = [2867 673]
    val markerTable = [ 
        "censorship" => censorship(gbg)
        "smartphones" => smartphones(gbg)
        "maerskalabama" => maerskAlabama(gbg)
        "pirates" => pirates(gbg)
    ]
    do(
        {overlay(gbg lookup(markerTable _) [(coord[0] + _ * 67) coord[1]])}
        markers(lab)
        0 to length(markers(lab))
    )

defn drawUsedPlots (gbg :GameBoardGraphics lab : Labyrinth) :
    drawPlots(gbg usedPlots(lab) [2100 53])

defn drawAvailablePlots (gbg : GameBoardGraphics lab : Labyrinth) :
    drawPlots(gbg plotAvailables(lab) [2867 807])

defn drawPlots (gbg : GameBoardGraphics plots : Vector<Int|String> coord : [Int Int]) :
    do(
        fn (plot i) :
            val row = i / 6
            val col = i % 6
            val x = coord[0] + col * 73
            val y = coord[1] + row * 73
            val p = switch {plot == _} :
                1 : plot1(gbg)
                -1 : plot1(gbg)
                2 : plot2(gbg)
                -2 : plot2(gbg)
                3 : plot3(gbg)
                -3 : plot3(gbg)
                "w" : plotW(gbg)
                "-w" : plotW(gbg)
                else : plot1(gbg)
            overlay(gbg p [x, y])
        plots
        0 to length(plots)
    )


defn drawReserves (gbg : GameBoardGraphics lab : Labyrinth) :
    overlay(gbg usreserve(gbg) [2648 (848 - usreserve(lab) * 87)])
    overlay(gbg jihadistreserve(gbg) [2726 (848 - jihadistreserve(lab) * 87)])

defn drawPhase (gbg : GameBoardGraphics lab : Labyrinth) :
    val x = 1653 + (214 when currentplayer(lab) == "us" else 0) + (107 when currentphase(lab) == 1 else 0)
    val y = 153
    overlay(gbg phase(gbg) [x y])

defn drawDeck (gbg : GameBoardGraphics lab : Labyrinth) :
    val x = 1960 + (3 - nbDeck(lab)) * 100 + (333 when nbDeck(lab) == 0 else 0)
    val y = 273
    overlay(gbg deck(gbg) [x y])

defn drawScores (gbg : GameBoardGraphics lab : Labyrinth) :
    val scores = Vector<Vector<Long>>()
    do(
        {add(scores Vector<Long>())}
        0 to 16
    )
    drawScore(getPIC(lab) pic(gbg) scores)
    drawScore(getFGC(lab) fgc(gbg) scores)
    drawScore(getGoodResource(lab) gr(gbg) scores)
    drawScore(getIslamResource(lab) ir(gbg) scores)
    showScores(gbg scores)

defn drawScore (score : Int marker : Long scores : Vector<Vector<Long>>):
    if 0 <= score and score <= 15 :
        add(scores[score] marker)

defn showScores (gbg : GameBoardGraphics scores : Vector<Vector<Long>>):
    val coord = [1893, 1773]
    val interval = 87
    do(
        fn (score) :
            val markers = scores[score]
            val num = length(markers)
            if num > 0:
                val row = 1 when score >= 7 else 0
                val col = (score - 6) when score >= 7 else score
                val x = coord[0] + interval * col
                val y = coord[1] - (num - 1) * 33 + row * interval
                do(
                    fn (i) : overlay(gbg markers[i] [x  (y + i * 67)])
                    0 to num
                )
        0 to 16
    )

defn drawGWOT (gbg : GameBoardGraphics lab : Labyrinth) :
    val us = getPosture(lab "us")
    val gwot = getGWOTHard(lab)
    val marker = gwotHard(gbg) when gwot > 0 else gwotSoft(gbg) when gwot < 0 else gwotHard(gbg) when us == "hard" else gwotSoft(gbg)
    val interval = 83
    val coord = [100 1367]
    overlay(gbg marker [(coord[0] + (gwot + 3) * interval) coord[1]])
    if us == "hard":
        overlay(gbg usHard(gbg) [420, 1440])
    else:
        overlay(gbg usSoft(gbg) [280, 1440])

defn drawPrestige (gbg : GameBoardGraphics lab : Labyrinth) :
    val coord = [73 1573]
    val interval = 83
    overlay(gbg prestige(gbg) [(coord[0] + interval * (prestige(lab) - 1)) coord[1] ])

defn drawFirstPlot (gbg : GameBoardGraphics lab : Labyrinth) :
    label<False> return :
        if not firstPlot(lab) :
            return(false)
        val card = firstPlotCard(lab)
        if card == 0:
            return(false)
        drawCardInBox(gbg card firstPlot(gbg))

defn drawLapsing (gbg : GameBoardGraphics lab : Labyrinth) :
    do(
        {drawCardInBox(gbg _ lapsing(gbg))}
        lapsing(lab)
    )

defn drawCardInBox (gbg : GameBoardGraphics card : Int marker : Long) :
    val cardBox = [827 1767]
    val filename = append-all(["vassalimages/Card" "_0" when card < 10 else "_" to-string(card) ".png"]) when card < 241 else
        append-all(["vassalimages/" to-string(card) ".png"])
    val image = sdl-load-image(filename board(gbg))
    val x = cardBox[0] + cardsInBox(gbg) * 167
    val y = cardBox[1] + cardsInBox(gbg) * 33
    overlay(gbg image [x, y])
    sdl-free-surface(image)
    overlay(gbg marker [(x + 100) (y + 167)])
    set-cardsInBox(gbg (cardsInBox(gbg) + 1))

defn drawCountry (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    ; println("drawCountry: %_" % [name])
    set-middle(gbg 0)
    set-left(gbg 0)
    set-right(gbg 0)
    if isMuslim(lab name):
        pasteGovern(gbg lab name)
        ;pasteCaliphate(gbg lab name)
        ;pasteCivilWar(gbg lab name)
        ;pasteRegimeChange(gbg lab name)
        ;pasteAid(gbg lab name)
        ;pasteBesiegedRegime(gbg lab name)
        ;pasteAwaken(gbg lab name)
        ;pasteReact(gbg lab name)
    else:
        if name != "us" and name !="iran":
            pastePosture(gbg lab name)
    ;pastePlot(gbg lab name)
    ;pasteMarkers(gbg lab name)
    pasteArsenal(gbg lab name)
    ;pasteTroop(gbg lab name)
    ;pasteMilitia(gbg lab name)
    ;pasteCell(gbg lab name)
    ;pasteCadre(gbg lab name)

defn get-upperleft (name : String) -> [Int Int]|False :
    match(lookup?(upperleft name)) :
        (rs : [Int Int]) : 
            map({_ * 10 / 3} rs) as [Int Int]
        (f) : false
    
defn pasteArsenal (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    match(get-upperleft(name)) :
        ([ox oy] : [Int Int]) : 
            val [x y] = [ox (oy + 233)] when name == "pakistan" else [(ox + 53) (oy - 100)]
            do(
                {overlay(gbg plotW(gbg) [(x + _ * 70), y])}
                0 to getArsenal(lab name)
            )
        (f) : false

defn pastePosture (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    if name != "us" and name != "israel" and name != "iran" :
        match(get-upperleft(name)) :
            (r : [Int Int]) :
                val posture = getPosture(lab name)
                match(hard(gbg) when posture == "hard" else soft(gbg) when posture == "soft" else false) :
                    (image : Long) : overlay(gbg image r)
                    (f) : false
            (f) : false

defn pasteGovern (gbg : GameBoardGraphics lab : Labyrinth name : String) :
    false
;     if name not in self.upperleft:
;         return
;     if self.game.isUntested(name):
;         return
;     x, y = self.upperleft[name]
;     align = self.game.getAlign(name)
;     x = x + 20 if align == 'neutral' else x
;     x = x + 40 if align == 'adversary' else x
;     govern = self.game.getGovern(name)
;     if govern == 'good':
;         self.board.alpha_composite(self.good, dest=(x, y))
;     elif govern == 'fair':
;         self.board.alpha_composite(self.fair, dest=(x, y))
;     elif govern == 'poor':
;         self.board.alpha_composite(self.poor, dest=(x, y))
;     elif govern == 'islamrule':
;         self.board.alpha_composite(self.islamrule, dest=(x, y))

; def pasteCaliphate(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     x += 20
;     y += 20 * (self.middle + 1)
;     if self.game.isCaliphateCapital(name):
;         self.board.alpha_composite(self.caliphateCapital, (x, y))
;         self.middle += 1
;     elif self.game.isCaliphate(name):
;         self.board.alpha_composite(self.caliphateCountry, (x, y))
;         self.middle += 1

; def pasteCivilWar(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     x += 20
;     y += 20 * (self.middle + 1)
;     if self.game.isCivilWar(name):
;         self.board.alpha_composite(self.civilWar, (x, y))
;         self.middle += 1

; def pasteRegimeChange(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     x += 20
;     y += 20 * (self.middle + 1)
;     if self.game.isGreenRegimeChange(name):
;         self.board.alpha_composite(self.greenRegimeChange, (x, y))
;         self.middle += 1
;     elif self.game.isTanRegimeChange(name):
;         self.board.alpha_composite(self.tanRegimeChange, (x, y))
;         self.middle += 1

; def pasteAid(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     x += 20
;     y += 20 * (self.middle + 1)
;     aid = self.game.getAid(name)
;     for i in range(aid):
;         self.board.alpha_composite(self.aid, (x, y))
;         y += 20
;         self.middle += 1

; def pasteBesiegedRegime(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     x += 20
;     y += 20 * (self.middle + 1)
;     if self.game.isBesiegedRegime(name):
;         self.board.alpha_composite(self.besiegedRegime, (x, y))
;         self.middle += 1

; def pasteCylinder(self, image, number, x, y):
;     for i in range(number):
;         row = i // 2
;         col = i % 2
;         local_x = x + col * 10
;         local_y = y + row * 10
;         if row % 2 == 1:
;             local_x -= 5
;         self.board.alpha_composite(image, (local_x, local_y))

; def pasteMilitia(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     y += 20 * (self.left + 1)
;     militia = self.game.getMilitia(name)
;     self.pasteCylinder(self.militia, militia, x, y)
;     self.left += (militia+3) // 4

; def pasteCadre(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     x += 40
;     y += 20 * (self.right + 1 if self.game.isMuslim(name) else 0)
;     if self.game.isCadre(name):
;         self.board.alpha_composite(self.cadre, (x, y))
;         self.right += 1

; def pasteTroop(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     y += 20 * (self.left + 1)
;     troop = self.game.getTroop(name)
;     self.pasteCylinder(self.troop, troop, x, y)
;     self.left += (troop+3) // 4

; def pasteCell(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     x += 40
;     y += 20 * (self.right + 1 if self.game.isMuslim(name) else 0)
;     activeCell = self.game.getActiveCell(name, False)
;     self.pasteCylinder(self.activeCell, activeCell, x, y)
;     self.right += (activeCell+3) // 4
;     y += ((activeCell+3) // 4) * 20
;     sleeperCell = self.game.getSleeperCell(name, False)
;     self.pasteCylinder(self.sleeperCell, sleeperCell, x, y)
;     self.right += (sleeperCell + 3) // 4

; def pasteAwaken(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     y += 40
;     awaken = self.game.getAwaken(name)
;     if awaken == 0:
;         return
;     self.board.alpha_composite(self.awaken, (x, y))
;     ImageDraw.Draw(self.board).text((x+10, y+6), str(awaken), (255, 255, 255))

; def pasteReact(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     x += 40
;     y += 40
;     react = self.game.getReact(name)
;     if react == 0:
;         return
;     self.board.alpha_composite(self.react, (x, y))
;     ImageDraw.Draw(self.board).text((x+10, y+6), str(react), (255, 255, 255))

; def pastePlot(self, name):
;     if name not in self.upperleft:
;         return
;     x, y = self.upperleft[name]
;     x += 20
;     y += 20 * (self.middle + 1 if self.game.isMuslim(name) else 0)
;     for pname, plot in self.game.plots:
;         if pname != name:
;             continue
;         print(pname, plot)
;         if isinstance(plot, str) and plot == '-w':
;             plot = 'w'
;         else:
;             plot = abs(plot)
;         if plot == 1:
;             self.board.alpha_composite(self.plot1, (x,y))
;         elif plot == 2:
;             self.board.alpha_composite(self.plot2, (x, y))
;         elif plot == 3:
;             self.board.alpha_composite(self.plot3, (x, y))
;         elif plot == 'w':
;             self.board.alpha_composite(self.plotW, (x, y))
;         y += 20
;         self.middle += 1

; def getCoord(self, name, pos):
;     if name not in self.upperleft:
;         return 0, 0
;     x, y = self.upperleft[name]
;     if pos == 'middle':
;         x += 20
;         y += 20 * (self.middle + 1 if self.game.isMuslim(name) else 0)
;     elif pos == 'right':
;         x += 40
;         y += 20 * (self.right + 1 if self.game.isMuslim(name) else 0)
;     else:
;         y += 20 * (self.left + 1)
;     return x, y

; def pasteMarkers(self, name):
;     nato = self.game.getNATO(name)
;     for i in range(nato):
;         self.board.alpha_composite(self.nato, self.getCoord(name, 'left'))
;         self.left += 1
;     advisors = self.game.isAdvisors(name)
;     for i in range(advisors):
;         self.board.alpha_composite(self.advisors, self.getCoord(name, 'middle'))
;         self.middle += 1
;     if self.game.isUNSCR1973(name):
;         self.board.alpha_composite(self.UNSCR1973, self.getCoord(name, 'middle'))
;         self.middle += 1
;     markerTable = { 'scsc': self.scsc, 'qataricrisis': self.qataricrisis, 'trainingcamps': self.trainingcamps,
;                     'truce': self.truce, 'bloodyThursday': self.bloodyThursday, '3cupsoftea': self.threeCupsOfTea,
;                     'anbarawakening': self.anbarAwakening, 'benazirbhutto': self.benazirBhutto,
;                     'indopakistanitalks': self.indoPakistaniTalks, 'bhuttoshot': self.bhuttoShot,
;                     'alanbar': self.alanbar, 'sadr': self.sadr, 'fata': self.fata}
;     for marker, image in markerTable.items():
;         if self.game.isMarker(name, marker):
;             if marker == 'sadr':
;                 self.board.alpha_composite(image, self.getCoord(name, 'right'))
;                 self.right += 1
;             else:
;                 self.board.alpha_composite(image, self.getCoord(name, 'middle'))
;                 self.middle += 1

