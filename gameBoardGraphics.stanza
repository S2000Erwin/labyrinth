defpackage GameBoardGraphics :
    import core
    import collections
    import sdl2
    import labyrinth

public defstruct GameBoardGraphics :
    window : Long
    win-surface : Long 
    baseBoard : Long
        
public defn make-GameBoardGraphics () -> GameBoardGraphics :
    val [window win-surface] = sdl-create-window("Labyrinth", 1024, 768)

    val gbg = GameBoardGraphics( 
        window
        win-surface
        sdl-load-image( "vassalimages/Labyrinth Map 2016.jpg", win-surface)    ; baseBoard
    )
    ; test-sdl2()
    print("GameBoardGraphics %_ %_ %_" % [window win-surface baseBoard(gbg)])
    show(gbg)
    gbg

public defn show (gbg : GameBoardGraphics lab : Labyrinth) :
    show(gbg)

public defn show (gbg : GameBoardGraphics) :
    print("show")
    print("GameBoardGraphics %_ %_ %_" % [window(gbg) win-surface(gbg) baseBoard(gbg)])
    sdl-overlay(baseBoard(gbg), false, win-surface(gbg), false)
    sdl-update(window(gbg))

public defn handle-events (gbg : GameBoardGraphics) -> Tuple<Char>|True|False :
    val char-buffer = Vector<Char>()
    label<Tuple<Char>|True|False> return :
        do( fn (e) :
                ;println(e)
                match(e) :
                    (e : SDL-window-event) : false ; todo: Once p is known, need to call call-SDL_UpdateWindowSurface(p)
                    (e : SDL-generic-event) : return(true) when SDL_QUIT == type(e)
                    (e : SDL-keyboard-event) :
                        if state(e) == 0Y and mod(e) == 0 :
                            val c = to-char(sym(e))
                            add(char-buffer, c)
                    (e) : false 
            sdl-event-loop()
        )  
        to-tuple(char-buffer)
        
        